import "@cadl-lang/rest";
import "@azure-tools/cadl-azure-core";

using Cadl.Rest;
using Azure.Core;

namespace NotificationHubsClient;

enum MSApiVersionTypeKnownValues {
  TwoThousandFifteen01: "2015-01",
  TwoThousandFifteen04: "2015-04",
  TwoThousandFifteen08: "2015-08",
  TwoThousandSixteen07: "2016-07",
}

@knownValues(MSApiVersionTypeKnownValues)
model MSApiVersionType is string;

enum NotificationHubContentModelTypeKnownValues {
  ApplicationXml: "application/xml",
}

@knownValues(NotificationHubContentModelTypeKnownValues)
model NotificationHubContentModelType is string;

enum NotificationHubDescriptionModelXmlnsIKnownValues {
  HttpWwwW3Org2001XMLSchemaInstance: "http://www.w3.org/2001/XMLSchema-instance",
}

@knownValues(NotificationHubDescriptionModelXmlnsIKnownValues)
model NotificationHubDescriptionModelXmlnsI is string;

enum NotificationHubDescriptionModelAuthorizationRulesItemITypeKnownValues {
  HttpWwwW3Org2001XMLSchemaInstance: "http://www.w3.org/2001/XMLSchema-instance",
}

@knownValues(
  NotificationHubDescriptionModelAuthorizationRulesItemITypeKnownValues
)
model NotificationHubDescriptionModelAuthorizationRulesItemIType is string;

enum NotificationHubDescriptionModelAuthorizationRulesItemClaimTypeKnownValues {
  "SharedAccessAuthorizationRule",
}

@knownValues(
  NotificationHubDescriptionModelAuthorizationRulesItemClaimTypeKnownValues
)
model NotificationHubDescriptionModelAuthorizationRulesItemClaimType is string;

enum RegistrationEntryModelXmlnsMKnownValues {
  HttpSchemasMicrosoftComAdo200708DataservicesMetadata: "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata",
}

@knownValues(RegistrationEntryModelXmlnsMKnownValues)
model RegistrationEntryModelXmlnsM is string;

enum PlatformTypeKnownValues {
  Apns: "apns",
  Wns: "wns",
  Gcm: "gcm",
  Baidu: "baidu",
  Adm: "adm",
}

@knownValues(PlatformTypeKnownValues)
model PlatformType is string;

enum InstallationPatchTypeKnownValues {
  Add: "add",
  Remove: "remove",
  Replace: "replace",
}

@knownValues(InstallationPatchTypeKnownValues)
model InstallationPatchType is string;

enum FormatParameterTypeKnownValues {
  Apple: "apple",
  Baidu: "baidu",
  Gcm: "gcm",
  Windows: "windows",
}

@knownValues(FormatParameterTypeKnownValues)
model FormatParameterType is string;

enum RegistrationContentModelTypeKnownValues {
  ApplicationXml: "application/xml",
}

@knownValues(RegistrationContentModelTypeKnownValues)
model RegistrationContentModelType is string;

enum AppleRegistrationContentModelXmlnsIKnownValues {
  HttpWwwW3Org2001XMLSchemaInstance: "http://www.w3.org/2001/XMLSchema-instance",
}

@knownValues(AppleRegistrationContentModelXmlnsIKnownValues)
model AppleRegistrationContentModelXmlnsI is string;

enum AppleTemplateRegistrationContentModelXmlnsIKnownValues {
  HttpWwwW3Org2001XMLSchemaInstance: "http://www.w3.org/2001/XMLSchema-instance",
}

@knownValues(AppleTemplateRegistrationContentModelXmlnsIKnownValues)
model AppleTemplateRegistrationContentModelXmlnsI is string;

enum BaiduRegistrationContentModelXmlnsIKnownValues {
  HttpWwwW3Org2001XMLSchemaInstance: "http://www.w3.org/2001/XMLSchema-instance",
}

@knownValues(BaiduRegistrationContentModelXmlnsIKnownValues)
model BaiduRegistrationContentModelXmlnsI is string;

enum BaiduTemplateRegistrationContentModelXmlnsIKnownValues {
  HttpWwwW3Org2001XMLSchemaInstance: "http://www.w3.org/2001/XMLSchema-instance",
}

@knownValues(BaiduTemplateRegistrationContentModelXmlnsIKnownValues)
model BaiduTemplateRegistrationContentModelXmlnsI is string;

enum GcmRegistrationContentModelXmlnsIKnownValues {
  HttpWwwW3Org2001XMLSchemaInstance: "http://www.w3.org/2001/XMLSchema-instance",
}

@knownValues(GcmRegistrationContentModelXmlnsIKnownValues)
model GcmRegistrationContentModelXmlnsI is string;

enum GcmTemplateRegistrationContentModelXmlnsIKnownValues {
  HttpWwwW3Org2001XMLSchemaInstance: "http://www.w3.org/2001/XMLSchema-instance",
}

@knownValues(GcmTemplateRegistrationContentModelXmlnsIKnownValues)
model GcmTemplateRegistrationContentModelXmlnsI is string;

enum WindowsRegistrationContentModelXmlnsIKnownValues {
  HttpWwwW3Org2001XMLSchemaInstance: "http://www.w3.org/2001/XMLSchema-instance",
}

@knownValues(WindowsRegistrationContentModelXmlnsIKnownValues)
model WindowsRegistrationContentModelXmlnsI is string;

enum WindowsTemplateRegistrationContentModelXmlnsIKnownValues {
  HttpWwwW3Org2001XMLSchemaInstance: "http://www.w3.org/2001/XMLSchema-instance",
}

@knownValues(WindowsTemplateRegistrationContentModelXmlnsIKnownValues)
model WindowsTemplateRegistrationContentModelXmlnsI is string;

enum ApiVersionTypeKnownValues {
  TwoThousandFifteen01: "2015-01",
  TwoThousandFifteen04: "2015-04",
  TwoThousandFifteen08: "2015-08",
  TwoThousandSixteen07: "2016-07",
  TwoThousandTwenty06: "2020-06",
}

@knownValues(ApiVersionTypeKnownValues)
model ApiVersionType is string;

enum ContentType {
  ApplicationJsonCharsetUtf8: "application/json;charset=utf-8",
  ApplicationXmlCharsetUtf8: "application/xml;charset=utf-8",
}

model NotificationHubEntryModel {
  content?: NotificationHubContentModel;
}

model NotificationHubContentModel {
  type?: NotificationHubContentModelType;

  @projectedName("json", "NotificationHubDescription")
  notificationHubDescription?: NotificationHubDescriptionModel;
}

model NotificationHubDescriptionModel {
  @projectedName("json", "xmlns:i")
  xmlnsI?: NotificationHubDescriptionModelXmlnsI;

  @projectedName("json", "RegistrationTtl")
  registrationTtl?: string;

  @projectedName("json", "Location")
  location?: string;

  @projectedName("json", "ApnsCredential")
  apnsCredential?: PropertyBagModelItem[];

  @projectedName("json", "GcmCredential")
  gcmCredential?: PropertyBagModelItem[];

  @projectedName("json", "WnsCredential")
  wnsCredential?: PropertyBagModelItem[];

  @projectedName("json", "AuthorizationRules")
  authorizationRules?: NotificationHubDescriptionModelAuthorizationRulesItem[];
}

model PropertyBagModelItem {
  @projectedName("json", "Name")
  name?: string;

  @projectedName("json", "Value")
  value?: string;
}

model NotificationHubDescriptionModelAuthorizationRulesItem {
  @projectedName("json", "i:type")
  iType?: NotificationHubDescriptionModelAuthorizationRulesItemIType;

  @projectedName("json", "ClaimType")
  claimType?: NotificationHubDescriptionModelAuthorizationRulesItemClaimType;

  @projectedName("json", "ClaimValue")
  claimValue?: string;

  @projectedName("json", "Rights")
  rights?: string[];

  @projectedName("json", "CreatedTime")
  createdTime?: string;

  @projectedName("json", "ModifiedTime")
  modifiedTime?: string;

  @projectedName("json", "KeyName")
  keyName?: string;

  @projectedName("json", "PrimaryKey")
  primaryKey?: string;

  @projectedName("json", "SecondaryKey")
  secondaryKey?: string;
}

model RegistrationEntryModel {
  content?: NotificationHubContentModel;

  @projectedName("json", "xmlns:m")
  xmlnsM?: RegistrationEntryModelXmlnsM;

  @projectedName("json", "m:etag")
  mEtag?: string;
}

@resource("{hubName}/installations/{installationId}")
model InstallationModel {
  @doc("Installation Unique Identifier")
  // FIXME: (resource-key-guessing) - Verify that this property is the resource key, if not please update the model with the right one
  @key
  installationId: string;

  @doc("The user ID for the installation")
  userId?: string;

  @doc("The date when the installation was made inactivate by the PNS.")
  @visibility("read")
  lastActiveOn?: string;

  @doc("Date in W3C format of last update to this installation.")
  @visibility("read")
  lastUpdate?: string;

  @doc("PNS Platform for the installation")
  platform: PlatformType;

  @doc("The unique device handle for the PNS.")
  pushChannel: string;

  @doc("This is true if the PNS expired the channel.")
  @visibility("read")
  expiredPushChannel?: boolean;

  @doc("The tags for the installation for targeting")
  tags?: string[];

  @doc("Set of named templates associated with the installation.")
  templates?: Record<InstallationTemplateModel>;

  @doc("""
Set of secondary tiles associated with the installation. Applies only to the
'wns' platform.
""")
  secondaryTiles?: Record<InstallationSecondaryTileModel>;
}

model InstallationTemplateModel {
  @doc("Template for the body of the notification.")
  body: string;

  @doc("""
Set of named headers associated with the template. Header values can contain
template parameters.
""")
  headers?: Record<string>;

  @doc("Template expression evaluating in W3D date format.")
  expiry?: string;

  @doc("The tags for the installation for targeting")
  tags?: string[];
}

model InstallationSecondaryTileModel {
  @doc("ChannelUri for the secondary tile. Applies only to the 'wns' platform.")
  pushChannel: string;

  @doc("The tags for the installation for targeting")
  tags?: string[];

  @doc("""
Set of named templates associated with the secondary tile. Applies only to the
'wns' platform.
""")
  templates?: Record<InstallationTemplateModel>;
}

model InstallationPatchModelItem {
  "op": InstallationPatchType;
  path: string;
  value?: string;
}

model RegistrationContentModel {
  type?: RegistrationContentModelType;

  @projectedName("json", "AppleRegistrationDescription")
  appleRegistrationDescription?: AppleRegistrationContentModel;

  @projectedName("json", "AppleTemplateRegistrationDescription")
  appleTemplateRegistrationDescription?: AppleTemplateRegistrationContentModel;

  @projectedName("json", "BaiduRegistrationDescription")
  baiduRegistrationDescription?: BaiduRegistrationContentModel;

  @projectedName("json", "BaiduTemplateRegistrationDescription")
  baiduTemplateRegistrationDescription?: BaiduTemplateRegistrationContentModel;

  @projectedName("json", "GcmRegistrationDescription")
  gcmRegistrationDescription?: GcmRegistrationContentModel;

  @projectedName("json", "GcmTemplateRegistrationDescription")
  gcmTemplateRegistrationDescription?: GcmTemplateRegistrationContentModel;

  @projectedName("json", "WindowsRegistrationDescription")
  windowsRegistrationDescription?: WindowsRegistrationContentModel;

  @projectedName("json", "WindowsTemplateRegistrationDescription")
  windowsTemplateRegistrationDescription?: WindowsTemplateRegistrationContentModel;
}

model AppleRegistrationContentModel {
  @projectedName("json", "xmlns:i")
  xmlnsI?: AppleRegistrationContentModelXmlnsI;

  @projectedName("json", "Tags")
  tags?: string;

  @projectedName("json", "DeviceToken")
  deviceToken: string;
}

model AppleTemplateRegistrationContentModel {
  @projectedName("json", "xmlns:i")
  xmlnsI?: AppleTemplateRegistrationContentModelXmlnsI;

  @projectedName("json", "Tags")
  tags?: string;

  @projectedName("json", "DeviceToken")
  deviceToken: string;

  @projectedName("json", "BodyTemplate")
  bodyTemplate: string;

  @projectedName("json", "Expiry")
  expiry?: string;
}

model BaiduRegistrationContentModel {
  @projectedName("json", "xmlns:i")
  xmlnsI?: BaiduRegistrationContentModelXmlnsI;

  @projectedName("json", "Tags")
  tags?: string;

  @projectedName("json", "BaiduUserId")
  baiduUserId: string;

  @projectedName("json", "BaiduChannelId")
  baiduChannelId: string;
}

model BaiduTemplateRegistrationContentModel {
  @projectedName("json", "xmlns:i")
  xmlnsI?: BaiduTemplateRegistrationContentModelXmlnsI;

  @projectedName("json", "Tags")
  tags?: string;

  @projectedName("json", "BaiduUserId")
  baiduUserId: string;

  @projectedName("json", "BaiduChannelId")
  baiduChannelId: string;

  @projectedName("json", "BodyTemplate")
  bodyTemplate: string;
}

model GcmRegistrationContentModel {
  @projectedName("json", "xmlns:i")
  xmlnsI?: GcmRegistrationContentModelXmlnsI;

  @projectedName("json", "Tags")
  tags?: string;

  @projectedName("json", "GcmRegistrationId")
  gcmRegistrationId?: string;
}

model GcmTemplateRegistrationContentModel {
  @projectedName("json", "xmlns:i")
  xmlnsI?: GcmTemplateRegistrationContentModelXmlnsI;

  @projectedName("json", "Tags")
  tags?: string;

  @projectedName("json", "GcmRegistrationId")
  gcmRegistrationId: string;

  @projectedName("json", "BodyTemplate")
  bodyTemplate: string;
}

model WindowsRegistrationContentModel {
  @projectedName("json", "xmlns:i")
  xmlnsI?: WindowsRegistrationContentModelXmlnsI;

  @projectedName("json", "Tags")
  tags?: string;

  @projectedName("json", "ChannelUri")
  channelUri: string;
}

model WindowsTemplateRegistrationContentModel {
  @projectedName("json", "xmlns:i")
  xmlnsI?: WindowsTemplateRegistrationContentModelXmlnsI;

  @projectedName("json", "Tags")
  tags?: string;

  @projectedName("json", "ChannelUri")
  channelUri: string;

  @projectedName("json", "BodyTemplate")
  bodyTemplate: string;

  @projectedName("json", "WnsHeaders")
  wnsHeaders?: WindowsTemplateRegistrationContentModelWnsHeadersItem[];
}

model WindowsTemplateRegistrationContentModelWnsHeadersItem {
  @projectedName("json", "Header")
  header?: string;

  @projectedName("json", "Value")
  value?: string;
}
