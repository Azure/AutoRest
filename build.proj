<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!--
  Targets:

  /t:Clean
    Removes temporary build outputs.

  /t:Build
    Builds assemblies.

  /t:Test
    Run unit tests.

  /t:Publish
    Publishes the built packages. You will need to include your
    publishing key when running. Include: /p:NuGetKey=YOUR_PUBLISHING_KEY

  /t:CodeAnalysis
    Run Code analysis.

  Properties of interest:
  /p:Scope
    'All' : builds ClientRuntime and CodeGenerator solutions
    'CodeGenerator': builds CodeGenerator solution only
    'ClientRuntime': builds ClientRuntime solution only
    By default, it builds all.

  /P:CodeSign=True
    Code sign binaries, mainly for official release

  /p:CodeSign=True;DelaySign=True
    Test the code sign workflow locally

  /p:NuGetKey=NUGET_PUBLISHING_KEY
    Provides the key used to publish to a NuGet or MyGet server.

    This key should never be committed to source control.

  /p:PublishSymbolSourcePackages
    A true/false value indicating whether to push the symbol + source
    packages to a symbol server.

  /p:NuGetPublishingSource=Uri
    The NuGet Server to push packages to.

  /p:NuGetSymbolPublishingSource=Uri
    The NuGet Server to push symbol + source packages to.
  -->

  <PropertyGroup>
    <CodeGeneratorSolution>Autorest.sln</CodeGeneratorSolution>
    <LibraryRoot>$(MSBuildThisFileDirectory)</LibraryRoot>
    <LibrarySourceFolder>$(LibraryRoot)</LibrarySourceFolder>
    <LibraryToolsFolder>$(LibraryRoot)Tools</LibraryToolsFolder>
    <BinariesFolder>$(LibraryRoot)binaries</BinariesFolder>
    <TestResultsFolder>$(LibraryRoot)TestResults</TestResultsFolder>
    <PackageOutputDir>$(BinariesFolder)\packages</PackageOutputDir>
    <Configuration Condition="'$(Configuration)' == '' ">Debug</Configuration>
    <CodeSign Condition=" '$(CodeSign)' == '' ">false</CodeSign>
    <!-- Only set set this to true for testing the code sign workflow locally. -->
    <DelaySign Condition =" '$(DelaySign)' == '' ">false</DelaySign>
    <Scope Condition=" '$(Scope)' == '' ">all</Scope>
    <ZipExeFolder>$(LibraryToolsFolder)\7-Zip</ZipExeFolder>
    <ZipExe>$(ZipExeFolder)\7z.exe</ZipExe>
  </PropertyGroup>

  <ItemGroup>
    <LibraryFxTargetList Condition=" '$(FxTargetList)' == '' and '$(Scope)' == 'CodeGenerator' " Include="net45" />
    <LibraryFxTargetList Condition=" '$(FxTargetList)' != '' " Include="$(FxTargetList)" />
  </ItemGroup>

  <PropertyGroup>
    <NuGetCommand Condition=" '$(OS)' == 'Windows_NT'">&quot;$(LibraryToolsFolder)\nuget.exe&quot;</NuGetCommand>
    <NuGetCommand Condition=" '$(OS)' != 'Windows_NT'">mono &quot;$(LibraryToolsFolder)\NuGet.exe&quot;</NuGetCommand>
   </PropertyGroup>

  
  <Import Project="tools\Autorest.Build.Tasks.msbuild"/>

  <!-- CI build related. -->
  <PropertyGroup>
    <ContinueOnPoliCheckError>true</ContinueOnPoliCheckError>
    <!--OnPremiseBuildTasks is not a good name, but CI server is using that, will update across soon-->
    <CIToolsPath>$(OnPremiseBuildTasks)</CIToolsPath>
    <OnPremiseBuild Condition=" Exists('$(OnPremiseBuildTasks)') ">true</OnPremiseBuild>
    <OnPremiseBuild Condition=" ! Exists('$(OnPremiseBuildTasks)') ">false</OnPremiseBuild>
  </PropertyGroup>
  
  <UsingTask Condition=" $(OnPremiseBuild) " TaskName="CodeSigningTask" AssemblyFile="$(CIToolsPath)\Microsoft.WindowsAzure.Tools.Build.Tasks.OnPremise.dll" />
  <UsingTask Condition=" $(OnPremiseBuild) " TaskName="CorporateValidation" AssemblyFile="$(CIToolsPath)\Microsoft.WindowsAzure.Tools.Build.Tasks.OnPremise.dll" />
  <Import Condition=" $(OnPremiseBuild) == 'true' " Project="$(CIToolsPath)\Microsoft.WindowsAzure.Build.OnPremise.msbuild" />

  <ItemGroup>
    <!-- things that get packaged -->
    <NetCoreLibraries Include="$(LibraryRoot)/ClientRuntimes/CSharp/*/project.json" Exclude="$(LibraryRoot)/ClientRuntimes/CSharp/*.Tests/project.json"/>
    <NetCoreLibraries Include="$(LibraryRoot)/AutoRest/Microsoft.Rest.Generator.Cli/project.json" />
    
    <!-- other projects -->
    <!-- <NetCoreProjects Include="$(LibraryRoot)/Autorest/**/project.json" Exclude="$(LibraryRoot)/Autorest/**/*.Tests/project.json"/> -->
    
    <!-- tests --> 
    <!-- <NetCoreTestLibraries Include="$(LibraryRoot)/ClientRuntimes/CSharp/*.Tests/project.json" />
    <NetCoreTestLibraries Include="$(LibraryRoot)/AutoRest/Generators/CSharp/*/project.json" /> -->
  </ItemGroup>
  
  <ItemGroup>
    <XProjFiles Include="$(LibraryRoot)/**/*.xproj" />
  </ItemGroup>
    
  <Target Name="Build"  DependsOnTargets="RestoreNugetPackages;RazorCompile"> 
    <CallTarget Targets="BuildServerPreparation" Condition=" '$(CodeSign)' == 'true' " /> 
    <CallTarget Targets="DisableSN" /> 

    <!-- use dotnet pack to build those that are supposed to be packaged --> 
    <Exec Command="dotnet pack --configuration $(Configuration)" WorkingDirectory="%(NetCoreLibraries.RootDir)%(NetCoreLibraries.Directory)"/>
    
    <!-- use dotnet build to build test libraries--> 
    <!-- <Exec Command="dotnet build - -configuration $(Configuration)" WorkingDirectory="%(NetCoreTestLibraries.RootDir)%(NetCoreTestLibraries.Directory)"/> -->
    
    <!-- copy created nupkgs to netcore folder -->
    <ItemGroup>
      <_OriginalNetCorePackages Include="%(NetCoreLibraries.RootDir)%(NetCoreLibraries.Directory)\bin\*\*.nupkg" />
    </ItemGroup>
    
    <Copy SourceFiles="@(_OriginalNetCorePackages)" DestinationFolder="$(LibraryRoot)\NetCore" />
    
    <ItemGroup>
      <_OriginalNetCorePackages Include="$(LibraryRoot)/ClientRuntimes/CSharp/**/bin/$(Configuration)/*.nupkg" />
    </ItemGroup>  
    <Copy SourceFiles="@(_OriginalNetCorePackages)" DestinationFolder="$(LibraryRoot)\NetCore" 
        Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'ClientRuntime'"/>
        
    <Copy SourceFiles="@(_OriginalNetCorePackages)" DestinationFolder="$(PackageOutputDir)" 
        Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'ClientRuntime'"/>
    <CallTarget Targets="CodeSignBinaries" Condition=" '$(CodeSign)' == 'true' " />
  </Target>
  
  <Target Name="DisableSN" > 
    <!-- Check for admin privs -->
    <Exec Command="net session" IgnoreExitCode="true" StandardErrorImportance="Low">
      <Output PropertyName="isadmin" TaskParameter="ExitCode" />
    </Exec>
 
    <!-- Disable strong name checking -->  
    <Exec Command='"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools\sn.exe" -Vr *' Condition="$(isadmin) == 0"/>
    <Exec Command='"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools\x64\sn.exe" -Vr *' Condition="$(isadmin) == 0"/>
  </Target>
  
  <Target Name="EnableSN" > 
    <!-- Check for admin privs -->
    <Exec Command="net session" IgnoreExitCode="true" StandardErrorImportance="Low">
      <Output PropertyName="isadmin" TaskParameter="ExitCode" />
    </Exec>
 
    <!-- Enable strong name checking -->  
    <Exec Command='"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools\sn.exe" -Vx *' Condition="$(isadmin) == 0"/>
    <Exec Command='"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.6.1 Tools\x64\sn.exe" -Vx *' Condition="$(isadmin) == 0"/>
  </Target>
  
  <!-- Project files import some targets coming from nuget packages, so need to restore them first to avoid errors
      such as "The imported project ....build\Microsoft.Bcl.Build.targets was not found. " -->
  <Target Name="Clean">
    <MSBuild Projects="%(XProjFiles.Identity)"
             Properties="Configuration=$(Configuration);Platform=Any CPU"
             Targets="Clean"
             Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'CodeGenerator'" />
    <RemoveDir Directories="$(BinariesFolder)" />
    <RemoveDir Directories="$(TestResultsFolder)" />
    <MakeDir Directories="$(BinariesFolder)" />
    <MakeDir Directories="$(TestResultsFolder)" />
  </Target>

  <Target Name="CodeAnalysis" DependsOnTargets="RestoreNugetPackages">
    <!--Note, we use "Rebuild" rather "Build", because code analysis happens during the build, and this ensures the build is not skipped-->
    <!-- NetCore project currently do not have support for code analysis -->
    <!-- 
    <MSBuild Projects="$(CodeGeneratorSolution)"
             Properties="Configuration=$(Configuration);Platform=Any CPU;RunCodeAnalysis=true;CodeAnalysisTreatWarningsAsErrors=true"
             Targets="Rebuild"
             Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'CodeGenerator'" />
      --> 
  </Target>

  <!-- Run tests. -->
  <Target Name="Test" DependsOnTargets="RestoreNugetPackages">
    <Exec Command="gulp test"/>
  </Target>

  <PropertyGroup>
    <!-- This property is used by the continuous intergration job.
         Do not remove without first updating the CI job. Also due to a known limitation,
         make sure pathes do not end with a backslash -->
    <CorporateScanPaths>$(LibrarySourceFolder)ClientRuntimes;$(LibrarySourceFolder)AutoRest</CorporateScanPaths>
    <BinscopeScanPath>$(BinariesFolder)</BinscopeScanPath>
    <!-- Public token of MSSharedLibKey.snk. -->
    <StrongNameToken Condition=" '$(StrongNameToken)' == '' ">31bf3856ad364e35</StrongNameToken>
  </PropertyGroup>
  
  <Target Name="CodeSignBinaries">
    <Error Condition=" !$(OnPremiseBuild) and !$(DelaySign) " Text="No CI tools path available, the code sign will be unable to continue. $(CIToolsPath)" />
    <Message Text="Code signing" Importance="high" />
    <MSBuild Projects="$(MSBuildProjectFullPath)"
             Targets="SignAssembliesInNetCorePackages"
             Condition=" '$(Scope)' == 'all' or '$(Scope)' == 'ClientRuntime'"
             Properties="StrongNameToken=$(StrongNameToken)">
    </MSBuild>
    <CallTarget Targets="ValidateCorporateCompliance" Condition="!$(DelaySign)"/>
  </Target>

  <Target Name="RestoreNugetPackages">
    <Exec Command="dotnet restore " ContinueOnError="false"/>
    <Exec Command="$(NuGetCommand) install xunit.runner.console -Version 2.1.0 -OutputDirectory $(LibraryRoot)packages" ContinueOnError="false"/>
  </Target>
  
  <Target Name="RazorCompile">
    <MSBuild BuildInParallel="false" Projects="%(XProjFiles.Identity)"
         Properties="Configuration=$(Configuration);Platform=Any CPU"
         Targets="CompileRazorTemplates" />
         
  </Target>
  
  <!-- Official releases require tools only available on corp network. -->
  <Target Name="ValidateCorporateCompliance">
    <Error Text="This target must be run in an on-premise build server." Condition=" '$(OnPremiseBuild)'=='false' " />
    <CallTarget Targets="CorporateValidation" />
    <CallTarget Targets="RunBinscope" />
  </Target>

  <!-- Build server tasks.  -->
  <Target Name="BuildServerPreparation">
    <!-- Log build server information. -->
    <Message Text="Build Server Information" Importance="high" />
    <Message Text="Hostname                : $(COMPUTERNAME)" />
    <Message Text="Build Account           : $(USERDOMAIN)\$(USERNAME)" />

    <!-- Log build properties.  -->
    <Message Text="Build Properties and Variables" Importance="high" />
    <Message Text="Source folder           : $(LibrarySourceFolder)" />
  </Target>

  <!-- Conditional import due to a bug in mono related to asterisk -->
  <!-- <Import Condition=" '$(OS)' == 'Windows_NT'" Project="tools\NuGet.targets"/> -->

  <Target Name="GetZip">
    <Message Text="Ensure 7zip is available" />
    <Exec
      Command="$(LibraryToolsFolder)\AzCopy\AzCopy.exe /Source:https://azuresdktools.blob.core.windows.net/7-zip  /S /Dest:$(ZipExeFolder) /Y"
      Condition="!Exists('$(ZipExe)')" />
  </Target>
  
  <Target Name="SignAssembliesInNetCorePackages" DependsOnTargets="GetZip">
    <ItemGroup>
      <_NetCorePackages Include="$(LibraryRoot)\NetCore\*.nupkg" Exclude="$(LibraryRoot)\NetCore\*Tests*.nupkg" />
    </ItemGroup> 
    <PropertyGroup>
      <_UnsignedFolder>$(PackageOutputDir)\unsigned</_UnsignedFolder>
      <_SignedFolder>$(PackageOutputDir)\signed</_SignedFolder>
    </PropertyGroup>  
    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="SdkPath"/>
    </GetFrameworkSdkPath>
    
    <Message Text="%(_NetCorePackages.Identity)" Importance="low" />
    
    <RemoveDir Directories="$(_UnsignedFolder);$(_SignedFolder)" ContinueOnError="false" />
    <RemoveDir Directories="@(_NetCorePackages->'$(PackageOutputDir)\%(Filename)')" ContinueOnError="false" />

    <MakeDir Directories="$(_UnsignedFolder);$(_SignedFolder)" />
    
    <Exec Command="$(ZipExe) x -y -scsUTF-8 -o@(_NetCorePackages->'$(PackageOutputDir)\%(Filename)') %(_NetCorePackages.Identity)" />

    <RemoveDir Directories="@(_NetCorePackages->'%(RootDir)%(Directory)\%(Filename)\_rels')" />
    <Delete Files="@(_NetCorePackages->'%(RootDir)%(Directory)\%(Filename)\[Content_Types].xml')" />

    <ItemGroup>
      <_TempBinaries Include="$(PackageOutputDir)\**\*.dll" />
      <_PackageBinaries Include="@(_TempBinaries)">
        <!-- Flattened file for signing -->
        <UnsignedFlatFileName>$(_UnsignedFolder)\$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '__'))</UnsignedFlatFileName>
        <SignedFlatFileName>$(_SignedFolder)\$([System.String]::new('%(RecursiveDir)%(FileName)%(Extension)').Replace('\', '__'))</SignedFlatFileName>
      </_PackageBinaries>
    </ItemGroup>

    <Copy SourceFiles="@(_PackageBinaries)" DestinationFiles="@(_PackageBinaries->'%(UnsignedFlatFileName)')"></Copy>

    <ValidateStrongNameSignatureTask
        SdkPath="$(SdkPath)"
        Assembly="%(_PackageBinaries.UnsignedFlatFileName)"
        ExpectedTokenSignature="$(StrongNameToken)"
        ExpectedDelaySigned="true"
        ContinueOnError="false"/>
        
    <CodeSigningTask
      Description="Microsoft Azure SDK"
      Keywords="Microsoft Azure .NET SDK"
      UnsignedFiles="@(_PackageBinaries->'%(UnsignedFlatFileName)')"
      DestinationPath="$(_SignedFolder)"
      SigningLogPath="$(PackageOutputDir)\signing.log"
      ToolsPath="$(CIToolsPath)"
      Condition="!$(DelaySign)"/>

    <!--If we are testing locally then we copy the binaries and do not submit to the code sign server-->
    <Copy SourceFiles="@(_PackageBinaries->'%(UnsignedFlatFileName)')" DestinationFolder="$(_SignedFolder)" Condition="$(DelaySign)" />

    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="WindowsSdkPath"/>
    </GetFrameworkSdkPath>
    
    <ValidateStrongNameSignatureTask
        SdkPath="$(SdkPath)"
        Assembly="%(_PackageBinaries.SignedFlatFileName)"
        ExpectedTokenSignature="$(StrongNameToken)"
        ExpectedDelaySigned="false"
        ContinueOnError="false"
        Condition="!$(DelaySign)"/>

    <Copy SourceFiles="@(_PackageBinaries->'%(SignedFlatFileName)')" DestinationFiles="@(_PackageBinaries->'%(FullPath)')"></Copy>
    <Exec Command="$(ZipExe) a -tzip -mx9 -r -y $(PackageOutputDir)\%(_NetCorePackages.Filename).nupkg" WorkingDirectory="$(PackageOutputDir)\%(_NetCorePackages.Filename)" />
    <Delete Files="@(_PackageBinaries->'%(UnsignedFlatFileName)')" />
    <Delete Files="@(_PackageBinaries->'%(SignedFlatFileName)')" />
  </Target>
</Project>
