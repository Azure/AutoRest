@using System
@using Microsoft.Rest.Generator.Java.Azure
@using Microsoft.Rest.Generator.Java.Azure.Templates
@using Microsoft.Rest.Generator.Utilities
@using Microsoft.Rest.Generator.Java.TemplateModels
@using Microsoft.Rest.Generator.Java.Templates
@using System.Linq
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Java.Azure.AzureServiceClientTemplateModel>
/**
@Header(" * ").TrimMultilineHeader()
 */
@EmptyLine

package @(Settings.Namespace.ToLower()).implementation.api;

@EmptyLine
@foreach (var importClass in Model.ImplImports)
{
@:import @importClass;
}
@EmptyLine

/**
 * Initializes a new instance of the @(Model.Name)Impl class.
 */
public final class @(Model.Name)Impl extends AzureServiceClient {
@if (Model.MethodTemplateModels.Any())
{
@:    /** The Retrofit service to perform REST calls. */
@:    private @Model.ServiceClientServiceType service;
}
    /** the {@@link AzureClient} used for long running operations. */
    private AzureClient azureClient;
@EmptyLine
    /**
     * Gets the {@@link AzureClient} used for long running operations.
     * @@return the azure client;
     */
    public AzureClient getAzureClient() {
        return this.azureClient;
    }
@foreach (var property in Model.Properties)
{
@EmptyLine
@:    /** @(property.Documentation.Period()) */
@:    private @(property.Type) @(property.Name.ToCamelCase());
@EmptyLine
@:    /**
@:     * Gets @(property.Documentation.Period())
@:     *
@:     * @@return the @(property.Name) value.
@:     */
@:    public @(property.Type) @(property.Name.ToCamelCase())() {
@:        return this.@(property.Name.ToCamelCase());
@:    }
if(!property.IsReadOnly)
{
@EmptyLine
@:    /**
@:     * Sets @(property.Documentation.Period())
@:     *
@:     * @@param @(property.Name.ToCamelCase()) the @(property.Name) value.
@:     */
@:    public void set@(property.Name.ToPascalCase())(@(property.Type) @(property.Name.ToCamelCase())) {
@:        this.@(property.Name.ToCamelCase()) = @(property.Name.ToCamelCase());
@:    }
}
}

@foreach (var operation in Model.Operations)
{
@EmptyLine
@:    /**
@:     * The @(operation.MethodGroupType)Inner object to access its operations.
@:     */
@:    private @(operation.MethodGroupType)Inner @(operation.MethodGroupName);
@EmptyLine
@:    /**
@:     * Gets the @(operation.MethodGroupType)Inner object to access its operations.
@:     * @@return the @(operation.MethodGroupType)Inner object.
@:     */
@:    public @(operation.MethodGroupType)Inner @(operation.MethodGroupName)() {
@:        return this.@(operation.MethodGroupName);
@:    }
}
@EmptyLine

@if (Settings.AddCredentials)
{
<text>
    /**
     * Initializes an instance of @(Model.Name) client.
     *
     * @@param credentials the management credentials for Azure
     */
    public @(Model.Name)Impl(ServiceClientCredentials credentials) {
        this("@Model.BaseUrl", credentials);
    }
@EmptyLine
    /**
     * Initializes an instance of @(Model.Name) client.
     *
     * @@param baseUrl the base URL of the host
     * @@param credentials the management credentials for Azure
     */
    @(Model.IsCustomBaseUri ? "private" : "public") @(Model.Name)Impl(String baseUrl, ServiceClientCredentials credentials) {
        this(new RestClient.Builder(baseUrl)
                .withMapperAdapter(new AzureJacksonMapperAdapter())
                .withCredentials(credentials)
                .build());
    }
@EmptyLine
    /**
     * Initializes an instance of @(Model.Name) client.
     *
     * @@param restClient the REST client to connect to Azure.
     */
    public @(Model.Name)Impl(RestClient restClient) {
        super(restClient);
        initialize();
    }

@EmptyLine

</text>
}
else
{
<text>
    /**
     * Initializes an instance of @(Model.Name) client.
     */
    public @(Model.Name)Impl() {
        this("@Model.BaseUrl");
    }
@EmptyLine
    /**
     * Initializes an instance of @(Model.Name) client.
     *
     * @@param baseUrl the base URL of the host
     */
    @(Model.IsCustomBaseUri ? "private" : "public") @(Model.Name)Impl(String baseUrl) {
        this(baseUrl, null);
    }
@EmptyLine
    /**
     * Initializes an instance of @(Model.Name) client.
     *
     * @@param restClient the REST client to connect to Azure
     */
    public @(Model.Name)Impl(RestClient restClient) {
        super(restClient);
        restClient.baseUrl("@Model.BaseUrl");
        initialize();
    }
@EmptyLine
</text>
}
    protected void initialize() {
@foreach (var property in Model.Properties.Where(p => p.DefaultValue != null))
{
        @:this.@(property.Name) = @(property.DefaultValue);
}
@foreach (var operation in Model.Operations)
{
@:        this.@(operation.MethodGroupName) = new @(operation.MethodGroupType)Inner(restClient().retrofit(), this);
}
        @Model.SetDefaultHeaders
        this.azureClient = new AzureClient(restClient());
@if (Model.MethodTemplateModels.Any())
{
@:        initializeService();
}
    }
@if (Model.MethodTemplateModels.Any())
{
@EmptyLine
<text>
    private void initializeService() {
        service = restClient().retrofit().create(@(Model.ServiceClientServiceType).class);
    }
</text>
@EmptyLine
if (Model.MethodTemplateModels.Any())
{
@:    @Include(new AzureServiceClientRetrofitTemplate(), Model)
@EmptyLine
}
<text>
@foreach (var method in Model.MethodTemplateModels)
{
    @:@(Include(new AzureMethodTemplate(), (AzureMethodTemplateModel)method))
    @EmptyLine
}
</text>
}
}
