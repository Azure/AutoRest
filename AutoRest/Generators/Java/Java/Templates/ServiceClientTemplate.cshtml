@using System
@using Microsoft.Rest.Generator.Java
@using Microsoft.Rest.Generator.Java.Templates
@using Microsoft.Rest.Generator.Utilities
@using Microsoft.Rest.Generator.Java.TemplateModels
@using System.Linq
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Java.ServiceClientTemplateModel>
/**
@Header(" * ").TrimMultilineHeader()
 */
@EmptyLine

package @(Settings.Namespace.ToLower()).implementation;

@EmptyLine
@foreach (var importClass in Model.ImplImports)
{
@:import @importClass;
}
@EmptyLine

/**
 * Initializes a new instance of the @Model.Name class.
 */
public final class @(Model.Name)Impl extends ServiceClient implements @Model.Name {
@if (Model.MethodTemplateModels.Any())
{
@:    /**
@:     * The Retrofit service to perform REST calls.
@:     */
@:    private @Model.ServiceClientServiceType service;
}
@foreach (var property in Model.Properties)
{
@EmptyLine
@:    /** @(property.Documentation.Period()) */
@:    private @(property.Type) @(property.Name.ToCamelCase());
@EmptyLine
@:    /**
@:     * Gets @(property.Documentation.Period())
@:     *
@:     * @@return the @(property.Name) value.
@:     */
@:    public @(property.Type) @(property.Name.ToCamelCase())() {
@:        return this.@(property.Name.ToCamelCase());
@:    }
if(!property.IsReadOnly)
{
@EmptyLine
@:    /**
@:     * Sets @(property.Documentation.Period())
@:     *
@:     * @@param @(property.Name.ToCamelCase()) the @(property.Name) value.
@:     */
@:    public void set@(property.Name.ToPascalCase())(@(property.Type) @(property.Name.ToCamelCase())) {
@:        this.@(property.Name.ToCamelCase()) = @(property.Name.ToCamelCase());
@:    }
}
}

@foreach (var operation in Model.Operations)
{
@EmptyLine
@:    /**
@:     * Gets the @(operation.MethodGroupType) object to access its operations.
@:     * @@return the @(operation.MethodGroupType) object.
@:     */
@:    public @(operation.MethodGroupType) @(operation.MethodGroupName)() {
@:        return new @(operation.MethodGroupType)Impl(restClient().retrofit(), this);
@:    }
}
@EmptyLine
    /**
     * Initializes an instance of @(Model.Name) client.
     */
    public @(Model.Name)Impl() {
        this("@Model.BaseUrl");
@if (Model.MethodTemplateModels.Any())
{
@:        initializeService();
}
    }
@EmptyLine
    /**
     * Initializes an instance of @(Model.Name) client.
     *
     * @@param baseUrl the base URL of the host
     */
    @(Model.IsCustomBaseUri ? "private" : "public") @(Model.Name)Impl(String baseUrl) {
        super(baseUrl);
@if (Model.MethodTemplateModels.Any())
{
@:        initializeService();
}
    }

@EmptyLine
    /**
     * Initializes an instance of @(Model.Name) client.
     *
     * @@param restClient the pre-configured {@@link RestClient} object
     */
    public @(Model.Name)Impl(RestClient restClient) {
        super(restClient);

@if (Model.IsCustomBaseUri)
{
@:        restClient.baseUrl("@(Model.BaseUrl)");
}
@if (Model.MethodTemplateModels.Any())
{
@:        initializeService();
}
    }

@if (Model.MethodTemplateModels.Any())
{
@EmptyLine
<text>
    private void initializeService() {
        service = restClient().retrofit().create(@(Model.ServiceClientServiceType).class);
    }
</text>
@EmptyLine
if (Model.MethodTemplateModels.Any())
{
@:    @Include(new ServiceClientRetrofitTemplate(), Model)
@EmptyLine
}
<text>
@foreach (var method in Model.MethodTemplateModels)
{
    @:@(Include(new MethodTemplate(), method))
    @EmptyLine
}
</text>
}
}
