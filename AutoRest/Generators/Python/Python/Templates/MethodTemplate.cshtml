@using System
@using System.Linq;
@using Microsoft.Rest.Generator.ClientModel
@using Microsoft.Rest.Generator.Utilities
@using Microsoft.Rest.Generator.Python
@using Microsoft.Rest.Generator.Python.TemplateModels
@using Microsoft.Rest.Generator.Python.Templates
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Python.MethodTemplateModel>
	@@ServiceClient.async_request
    def @(Model.Name.ToPythonCase())(self, @(Model.MethodParameterDeclaration(true))):
        """
@if (!String.IsNullOrEmpty(Model.Summary))
{
@:        @WrapComment(string.Empty, Model.Summary)
}
@if (!String.IsNullOrEmpty(Model.Description))
{
@EmptyLine
@:        @WrapComment(string.Empty, Model.Description)
}
        """
@EmptyLine
    @*if (Model.IsAbsoluteUrl) *@
        # Construct URL
        url = '@(Model.Url)'
        @(Model.BuildUrlPath("url"))
@EmptyLine
        # Construct parameters
        query = {}
        @(Model.BuildUrlQuery("query"))
@EmptyLine
        # Construct headers
        headers = {}
        @(Model.BuildHeaders("query"))
        headers.update(custom_headers)
        headers['Content-Type'] = '@(Model.ContentType)'
@* Add Credentials *@
@EmptyLine
@if (Model.RequestBody != null)
{
@:        # Construct body
@:        content = Serialized(@Model.RequestBody.Name)
@EmptyLine
}
@*stream handler*@
        # Construct and send request
        request = self._client.@(Model.GetHttpFunction(Model.HttpMethod))(url, query)
@if (Model.RequestBody != null)
{
@:        response = self._client.send(request, headers, content)
}
else
{
@:        response = self._client.send(request, headers)
}
@EmptyLine
		self._verify_response(response, [@Model.GetAcceptStatus()], BatchStatusError@*Get correct error type*@)
@EmptyLine
		deserialized = self._deserialize(ResponseObj, response)
@EmptyLine
		if raw:
			return deserialized, response
@EmptyLine
		return deserialized
@EmptyLine
