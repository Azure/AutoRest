@using Microsoft.Rest.Generator.Python
@using Microsoft.Rest.Generator.Python.Templates
@using System.Linq;
@inherits Microsoft.Rest.Generator.Template<Microsoft.Rest.Generator.Python.MethodGroupTemplateModel>
import sys
@EmptyLine
try:
    from urllib import quote
@EmptyLine
except ImportError:
    from urllib.parse import quote
@EmptyLine
@if (Model.ContainsDecimal)
{
@:from decimal import *
}
@if (Model.ContainsDatetime)
{
@:from datetime import *
}
@EmptyLine
try:
    from urlparse import urljoin
@EmptyLine
except ImportError:
    from urllib.parse import urljoin
@EmptyLine
from runtime.msrest.service_client import ServiceClient
from runtime.msrest.serialization import Serializer, Deserializer
from runtime.msrest.exceptions import (
    SerializationError,
    DeserializationError,
    TokenExpiredError,
    ClientRequestError)
@EmptyLine
from runtime.msrestazure.azure_handlers import Paged, Polled
@EmptyLine
@*from ..batch_exception import BatchStatusError, @EmptyLine*@
from ..models import *
@EmptyLine
class @(Model.MethodGroupType)(object):
@EmptyLine
    def __init__(self, client, config, serializer, derserializer):
@EmptyLine
        self._client = client
        self._serialize = serializer
        self._deserialize = derserializer
@EmptyLine
        self.config = config
@EmptyLine
    def _verify_response(self, response, accept_status, error):
@EmptyLine
        if response.status_code != accept_status:
            deserialized = self.deserialize(
                error, response, self._deserialize.dependencies)
@EmptyLine
            raise deserialized
@EmptyLine
	def _parse_url(self, name, value, datatype):
@EmptyLine
		try:
			value = self._serialize.serialize_data(value, str(datatype))
@EmptyLine
		except ValueError:
			raise ValueError("{} must not be None.".format(name))
@EmptyLine
		except DeserializationError:
			raise TypeError("{} must by type {}.".format(name, datatype))
@EmptyLine
		else:
			return quote(value)
@EmptyLine
@foreach (var method in Model.MethodTemplateModels)
{
@:@(Include(new MethodTemplate(), method))
@EmptyLine
}
@EmptyLine
