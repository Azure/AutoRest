@using System
@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.NodeJS.Model
@using AutoRest.NodeJS.Templates
@using AutoRest.NodeJS.Azure.Model
@inherits AutoRest.Core.Template<MethodJsa>

@if (!Model.IsLongRunningOperation)
{
@:@(Include( new MethodTemplate(), Model as MethodJs))
}
else
{
    <text>
@EmptyLine
@(Model.GenerateMethodDocumentation(MethodJs.MethodFlavor.Callback))
function _@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationWithCallback())) {
   /* jshint validthis: true */
  let client = @(Model.ClientReference);
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  @EmptyLine
  if (!callback) {
    throw new Error('callback cannot be null.');
  }
  @EmptyLine
  // Send request
  this.begin@(Model.Name.ToPascalCase())(@(Model.MethodParameterDeclaration), (err, parsedResult, httpRequest, response) => {
    if (err) return callback(err);
    @EmptyLine
    let initialResult = new msRest.HttpOperationResponse();
    initialResult.request = httpRequest;
    initialResult.response = response;
    initialResult.body = response.body;
    client.@(Model.LongRunningOperationMethodNameInRuntime)(initialResult, options, (err, pollingResult) => {
      if (err) return callback(err);
      @EmptyLine
      let statusCode = pollingResult.response.statusCode;
      httpRequest = pollingResult.request;
      response = pollingResult.response;
      let responseBody = pollingResult.body;
      //Error handling for a failure in a long running operation after polling is completed.
      if (@(Model.FailureStatusCodePredicate)) {
        let error = new Error(responseBody);
        error.statusCode = response.statusCode;
        error.request = msRest.stripRequest(httpRequest);
        error.response = msRest.stripResponse(response);
        if (responseBody === '') responseBody = null;
        let parsedErrorResponse;
        try {
          parsedErrorResponse = JSON.parse(responseBody);
          if (parsedErrorResponse) {
            @(Model.PopulateErrorCodeAndMessage())
          }
@if (Model.DefaultResponse.Body != null)
{
          var deserializeErrorBody = Model.GetDeserializationString(Model.DefaultResponse.Body, "error.body", "parsedErrorResponse");
    if (!string.IsNullOrWhiteSpace(deserializeErrorBody))
    {
    @:    if (parsedErrorResponse !== null && parsedErrorResponse !== undefined) {
    @:      @(deserializeErrorBody)
    @:    }
    }
}
        } catch (defaultError) {
          error.message = `Error "${defaultError.message}" occurred in deserializing the responseBody ` +
                          `- "${responseBody}" for the "default" response, after completing the polling ` + 
                          `for long running operation.`;
          return callback(error);
        }
        return callback(error);
      }

      // Create Result
      let result = null;
      if (responseBody === '') responseBody = null;
      @EmptyLine
      // Deserialize Response
      @if (Model.ReturnType.Body != null)
      {
      @:@(Model.DeserializeResponse(Model.ReturnType.Body))
      }

      @if (Model.ReturnType.Body != null && Model.DefaultResponse.Body != null && !Model.Responses.Any())
      {
      @:@(Model.DeserializeResponse(Model.DefaultResponse.Body))
      }
      @EmptyLine
      return callback(null, result, httpRequest, response);
    });
  });
}
    </text>
}
