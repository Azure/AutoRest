@using System
@using AutoRest.CSharp.Azure.JsonRpcClient.Templates
@using System.Linq
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.CSharp.Model
@using AutoRest.CSharp.JsonRpcClient.Templates.Rest.Client
@using AutoRest.CSharp.Azure.JsonRpcClient
@inherits AutoRest.Core.Template<AutoRest.CSharp.Azure.Model.MethodCsa>

static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo @(Model.Name)_RequestInfo =
    new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequestInfo(
        title: "@(Model.MethodGroup.CodeModel.Name)",
        id: "@(Model.SerializedName)",
        method: "@(Model.HttpMethod.ToString().ToUpper())",
        // path = "@(Model.Url)"
        path: new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
        {
            @foreach (var p in Model.GetPathParts())
            {
            @:new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "@(p.Item1)", isParam: @(p.Item2 ? "true" : "false")),
            }            
        },
        constList: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
        {
            @foreach (var p in Model.LogicalParameters.Where(x => x.IsConstant))
            {
            @:new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
                @:new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
                    @:name: "@(p.SerializedName)",
                    @:location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.@(p.Location)),
                @:@(p.GetExp())),
            }
        });

@foreach (var p in Model.LogicalParameters.Where(x => !x.IsConstant))
{
@EmptyLine
@:static readonly Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo @(Model.GetParameterInfoName(p)) = 
    @:new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamInfo(
        @:name: "@(p.SerializedName)",
        @:location: Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamLocation.@(p.Location));
}

@EmptyLine
public System.Threading.Tasks.Task<@(Model.OperationResponseReturnTypeString)> @(Model.Name)WithHttpMessagesAsync(
    @(Model.GetAsyncMethodParameterDeclaration(true)))
{
    var params_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam[]
    {
        @foreach(var p in Model.LogicalParameters.Where(x => !x.IsConstant))
        {
        @:new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParam(
            @:@(Model.GetParameterInfoName(p)),
            @:@(p.GetExp())),
        }
    };
    var operation_ = new Microsoft.Rest.ClientRuntime.Test.Azure.AzureRequest(
        info: @(Model.Name)_RequestInfo,
        @if (Model.IsCustomBaseUri)
        {
        @:baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureParamBaseUri(
            @:new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart[]
            @:{
                foreach (var p in Model.GetUriParts())
                {
                @:new Microsoft.Rest.ClientRuntime.Test.Azure.AzurePathPart(value: "@(p.Item1)", isParam: @(p.Item2 ? "true" : "false")),
                }            
            @:}),        
        }
        else
        {
        @:baseUri: new Microsoft.Rest.ClientRuntime.Test.Azure.AzureConstBaseUri(this.Client.BaseUri),
        }
        paramList: params_);
    return Microsoft.Rest.ClientRuntime.Test.Azure.ServiceClientEx.Call(
        this.Client,
        operation_,
        new Microsoft.Rest.ClientRuntime.Test.Azure.Tag<@(Model.OperationResponseReturnTypeString)>());
}