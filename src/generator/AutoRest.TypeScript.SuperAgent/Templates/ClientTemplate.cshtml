@using AutoRest.TypeScript.SuperAgent.Model
@inherits AutoRest.Core.Template<ClientGroupsModel>

// API version: @Model.Header.ApiVersion
// Generated by: @Model.Header.GeneratedBy at @Model.Header.GeneratedAt
// Tool version: @Model.Header.GeneratorVersion

import { Promise } from 'es6-promise';
import * as request from 'superagent';
import "./model";

class Url{
    protected url: string;

    public constructor(baseUrl: string){
        this.url = baseUrl;
    }

    public addToPath(name: string, value: string) : Url {
        this.url.replace('{'  + name +  '}', value);
        return this;
    }

    public addToQuery(name: string, value: string) : Url {
        this.url.replace('{'  + name +  '}', value);
        return this;
    }

    public add(url: string) :  Url {
        this.url += url;
        return this;
    }

    public toString() : string {
        return this.url;
    }
}

type CreateReq = (url : string) => Req;
type ReqHandler = (req : CreateReq) => Req;

class ApiClient<T> {
    private req: Req;
    private url: Url;

    construtor(req: Req, url: Url) {
        req.set('Accept', 'application/json');
        this.req = req;
        this.url = url;
    }

    public async withReq(handler: ReqHandler): Promise<T> {
        return new Promise<T>((resolve, reject) => {
            try {
                handler(this.req, this.url).end((err, res) => err === undefined ? resolve(res.body as T) : reject(err));
            } catch (e) {
                reject(e);
            }
        }
    }
}

abstract class BaseApi {
    private baseUrl: string;

    protected constructor(baseUrl: string){
        if(baseUrl === undefined || baseUrl === null){
            baseUrl = "";
        }
        this.baseUrl = baseUrl;
    }

    protected newUrl(url : string){
        return new Url(this.baseUrl).add(url);
    }
}

@foreach (var client in Model.Clients)
{
@:export interface @(client.InterfaceName) {
    foreach (var method in client.Methods)
    {
@:    @(method.MethodName)(requestDto: @(method.RequestTypeName)) : @(method.ResponsePromiseTypeName);
    }
@:}

@:export class @(client.Name) extends BaseApi implements @(client.InterfaceName) {
@:
@:    public constructor(baseUrl: string) {
@:        super(baseUrl);
@:    }
    foreach (var method in client.Methods)
    {
@:    public async @(method.MethodName)(requestDto: @(method.RequestTypeName)) : @(method.ResponsePromiseTypeName) {
@:        return await new ApiClient<@(method.ResponseTypeName)>(
@:            url => request.@(method.HttpMethod)(url), 
@:            this.newUrl('@(method.Url)'))
@:                .withReq((reqFactory, url) => {
@:                    requestDto.validate();

        foreach (var name in method.ParamNamesInPath) {
@:                    url.addToPath('@(name)', requestDto.@(name));
        }

        foreach (var name in method.ParamNamesInQuery)
        {
@:                    url.addToQuery('@(name)', requestDto.@(name));
        }
@:                    return reqFactory(url.toString())
        foreach (var name in method.ParamNamesInBody)
        {
@:                        .send(requestDto.@(name))
        }

        foreach (var name in method.ParamNamesInHeader)
        {
@:                        .set('@(name)', requestDto.@(name))
        };
@:            });
@:    }
    }
@:}
}