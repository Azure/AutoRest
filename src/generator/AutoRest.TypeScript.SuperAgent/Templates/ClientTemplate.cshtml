@using System.Linq
@using AutoRest.Core.Utilities
@using AutoRest.TypeScript.SuperAgent.Model
@inherits AutoRest.Core.Template<ClientGroupsModel>

// API version: @Model.Header.ApiVersion
// Generated by: @Model.Header.GeneratedBy at @Model.Header.GeneratedAt
// Tool version: @Model.Header.GeneratorVersion

import * as request from 'superagent';
import * as @(Model.ModelModuleName) from "./model"

type CreateReq = (url: string) => any;

interface IMap<T> {
    [K: string]: T;
}

class HttpCall<TReq, TRes> {

    private headers: IMap<string>;
    private url: string;
    private requestDto: TReq;

    constructor(requestDto: TReq, url: string) {
        this.url = url;
        this.requestDto = requestDto;
    }

    withHeaders(map: IMap<string>): HttpCall<TReq, TRes> {

        this.headers = map;
        return this;
    }

    private execute(req: CreateReq, body?: any): Promise<TRes> {
        return new Promise<TRes>((resolve, reject) => {
            try {
                if ((<any>this.requestDto).validate) {
                    (<any>this.requestDto).validate();
                }

                var httpRequest = req(this.url);
                if (body) {httpRequest.send(body);}
                httpRequest.end((err: any, res: any) => err === undefined ? resolve(res.body as TRes) : reject(err));
            }
            catch (e) {
                reject(e);
            }
        });
       
    }

    httpPost(body?: any): Promise<TRes> {
        return this.execute(() => request.post, body);
    }

    httpGet(): Promise<TRes> {
        return this.execute(() => request.get);
    }

    httpPut(body?: any): Promise<TRes> {
        return this.execute(() => request.put, body);
    }

    httpDelete(body?: any): Promise<TRes> {
        return this.execute(() => request.put, body);
    }
}
    
class UrlConfig<TReq, TRes>
{
    private requestDto: TReq;
    
    constructor(requestDto: TReq)
    {
        this.requestDto = requestDto;
    }

    withUrl(url: string) : HttpCall<TReq, TRes>
    {
        return new HttpCall<TReq, TRes>(this.requestDto, url);
    }
}

function req<TReq, TRes>(requestDto: TReq) : UrlConfig<TReq, TRes> {
    return new UrlConfig<TReq, TRes>(requestDto);
}

abstract class BaseApi {
    protected baseUrl: string;

    constructor(baseUrl: string){
        if(baseUrl === undefined || baseUrl === null){
            baseUrl = "";
        }
        this.baseUrl = baseUrl;
    }
}

@foreach (var client in Model.Clients)
{
@:export interface @(client.InterfaceName) {
    foreach (var method in client.Methods)
    {
@:    @(method.MethodName)(requestDto: @(method.RequestTypeName)) : @(method.ResponsePromiseTypeName);
    }
@:}

@:export class @(client.Name) extends BaseApi implements @(client.InterfaceName) {
@:
@:    public constructor(baseUrl: string) {
@:        super(baseUrl);
@:    }
    foreach (var method in client.Methods)
    {
@:    async @(method.MethodName)(requestDto: @(method.RequestTypeName)) : @(method.ResponsePromiseTypeName) {
@:        return await req<@($"{method.RequestTypeName}, {method.ResponseTypeName}")>(requestDto)
@:            .withUrl(`@(method.UrlTemplate)`) 
@:            .withHeaders({@(string.Join(",", method.ParamNamesInHeader.Select(p => $"'{p}' : requestDto.{p}").ToArray()))})
@:            .http@(method.HttpMethod.ToPascalCase())(@(method.ParamNamesInBody.Any() ? $"requestDto.{method.ParamNamesInBody.First()}" : ""));
@:    }
    }
@:}
}