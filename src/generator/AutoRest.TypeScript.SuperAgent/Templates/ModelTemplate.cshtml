@using System.Linq
@using AutoRest.TypeScript.SuperAgent.Model
@inherits AutoRest.Core.Template<ModelsModel>

// API version: @Model.Header.ApiVersion
// Generated by: @Model.Header.GeneratedBy at @Model.Header.GeneratedAt
// Tool version: @Model.Header.GeneratorVersion

abstract class RequestBase {
    validateProperty(value: Any, name: string){
        if(value === null){
            throw new Error("Missing required property value: " +name);
        }
    }

    abstract validate();
}

@foreach (var model in Model.ResponseModels)
{
@:export class @(model.Name) {
    foreach (var property in model.Properties)
    {
        if (property.IsRequired)
        {
@:    public @(property.Name) : @(property.TypeName);
        }
        else
        {
@:    public @(property.Name)? : @(property.TypeName);
        }
    }
@:}
@:
}

@foreach (var model in Model.RequestModels)
{
@:export class @(model.Name) extends RequestBase {
    foreach (var property in model.Properties)
    {
        if (property.IsRequired)
        {
@:    public @(property.Name) : @(property.TypeName); 
        }
        else
        {
@:    public @(property.Name)? : @(property.TypeName);
        }
    }

@:    public validate(){
    foreach (var p in model.Properties.Where(p => p.IsRequired))
    {
@:        validateProperty(this.@(p.Name), "@(p.Name)");
    }
@:    }
@:}
}



