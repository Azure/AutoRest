@inherits AutoRest.Core.Template<dynamic>
import * as request from 'superagent';

export type CreateReq = (url: string) => request.SuperAgentRequest;
export interface IMap<T> {
    [K: string]: T;
}
export class HttpCall<TReq, TRes> {
    private headers: IMap<string>;
    private url: string;
    private requestDto: TReq;
    constructor(requestDto: TReq, url: string) {
        this.url = url;
        this.requestDto = requestDto;
    }
    withHeaders(map: IMap<string>): HttpCall<TReq, TRes> {
        this.headers = map;
        return this;
    }
    private execute(req: CreateReq, body?: any): Promise<TRes> {
        return new Promise<TRes>((resolve, reject) => {
            try {
                if ((<any>this.requestDto).validate) {
                    (<any>this.requestDto).validate();
                }
                var httpRequest = req(this.url);
                if (body) {httpRequest.send(body);}
                httpRequest.end((err: any, res: any) => err === undefined ? resolve(res.body as TRes) : reject(err));
            }
            catch (e) {
                reject(e);
            }
        });
    }
    httpPost(body?: any): Promise<TRes> {
        return this.execute(url => request.post(url), body);
    }
    httpGet(): Promise<TRes> {
        return this.execute(url => request.get(url));
    }
    httpPut(body?: any): Promise<TRes> {
        return this.execute(url => request.put(url), body);
    }
    httpDelete(body?: any): Promise<TRes> {
        return this.execute(url => request.delete(url), body);
    }
}
export class UrlConfig<TReq, TRes>
{
    private requestDto: TReq;
    constructor(requestDto: TReq)
    {
        this.requestDto = requestDto;
    }
    withUrl(url: string) : HttpCall<TReq, TRes>
    {
        return new HttpCall<TReq, TRes>(this.requestDto, url);
    }
}
export function req<TReq, TRes>(requestDto: TReq) : UrlConfig<TReq, TRes> {
    return new UrlConfig<TReq, TRes>(requestDto);
}
export abstract class BaseApi {
    protected baseUrl: string;
    constructor(baseUrl?: string){
        if(baseUrl === undefined || baseUrl === null){
            baseUrl = "";
        }
        this.baseUrl = baseUrl;
    }
}