// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Fixtures.MirrorPrimitives.Models
{
    using System.Linq;

    public partial class Product
    {
        /// <summary>
        /// Initializes a new instance of the Product class.
        /// </summary>
        public Product() { }

        /// <summary>
        /// Initializes a new instance of the Product class.
        /// </summary>
        /// <param name="enumProperty">Possible values include: 'red', 'blue',
        /// 'green'</param>
        public Product(System.Int32? integer = default(System.Int32?), System.Int32? intProperty = default(System.Int32?), System.Int64? longProperty = default(System.Int64?), System.Double? number = default(System.Double?), System.Double? floatProperty = default(System.Double?), System.Double? doubleProperty = default(System.Double?), System.Byte[] byteProperty = default(System.Byte[]), System.String stringProperty = default(System.String), System.Byte[] base64url = default(System.Byte[]), System.Guid? uuid = default(System.Guid?), System.String enumProperty = default(System.String), System.Boolean? boolean = default(System.Boolean?), System.DateTime? date = default(System.DateTime?), System.DateTime? dateTime = default(System.DateTime?), System.Collections.Generic.IList<System.Int32?> integerArray = default(System.Collections.Generic.IList<System.Int32?>), System.Collections.Generic.IList<System.Int32?> intArray = default(System.Collections.Generic.IList<System.Int32?>), System.Collections.Generic.IList<System.Int64?> longArray = default(System.Collections.Generic.IList<System.Int64?>), System.Collections.Generic.IList<System.Double?> numberArray = default(System.Collections.Generic.IList<System.Double?>), System.Collections.Generic.IList<System.Double?> floatArray = default(System.Collections.Generic.IList<System.Double?>), System.Collections.Generic.IList<System.Double?> doubleArray = default(System.Collections.Generic.IList<System.Double?>), System.Collections.Generic.IList<System.Byte[]> byteArray = default(System.Collections.Generic.IList<System.Byte[]>), System.Collections.Generic.IList<System.Boolean?> booleanArray = default(System.Collections.Generic.IList<System.Boolean?>), System.Collections.Generic.IList<System.String> stringArray = default(System.Collections.Generic.IList<System.String>), System.Collections.Generic.IList<System.Byte[]> base64urlArray = default(System.Collections.Generic.IList<System.Byte[]>), System.Collections.Generic.IList<System.DateTime?> dateArray = default(System.Collections.Generic.IList<System.DateTime?>), System.Collections.Generic.IList<System.DateTime?> dateTimeArray = default(System.Collections.Generic.IList<System.DateTime?>), System.Collections.Generic.IList<System.Guid?> uuidArray = default(System.Collections.Generic.IList<System.Guid?>))
        {
            Integer = integer;
            IntProperty = intProperty;
            LongProperty = longProperty;
            Number = number;
            FloatProperty = floatProperty;
            DoubleProperty = doubleProperty;
            ByteProperty = byteProperty;
            StringProperty = stringProperty;
            Base64url = base64url;
            Uuid = uuid;
            EnumProperty = enumProperty;
            Boolean = boolean;
            Date = date;
            DateTime = dateTime;
            IntegerArray = integerArray;
            IntArray = intArray;
            LongArray = longArray;
            NumberArray = numberArray;
            FloatArray = floatArray;
            DoubleArray = doubleArray;
            ByteArray = byteArray;
            BooleanArray = booleanArray;
            StringArray = stringArray;
            Base64urlArray = base64urlArray;
            DateArray = dateArray;
            DateTimeArray = dateTimeArray;
            UuidArray = uuidArray;
        }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "integer")]
        public System.Int32? Integer { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "int")]
        public System.Int32? IntProperty { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "long")]
        public System.Int64? LongProperty { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "number")]
        public System.Double? Number { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "float")]
        public System.Double? FloatProperty { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "double")]
        public System.Double? DoubleProperty { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "byte")]
        public System.Byte[] ByteProperty { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "string")]
        public System.String StringProperty { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonConverter(typeof(Microsoft.Rest.Serialization.Base64UrlJsonConverter))]
        [Newtonsoft.Json.JsonProperty(PropertyName = "base64url")]
        public System.Byte[] Base64url { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uuid")]
        public System.Guid? Uuid { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'red', 'blue', 'green'
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enum")]
        public System.String EnumProperty { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "boolean")]
        public System.Boolean? Boolean { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonConverter(typeof(Microsoft.Rest.Serialization.DateJsonConverter))]
        [Newtonsoft.Json.JsonProperty(PropertyName = "date")]
        public System.DateTime? Date { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dateTime")]
        public System.DateTime? DateTime { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "integerArray")]
        public System.Collections.Generic.IList<System.Int32?> IntegerArray { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "intArray")]
        public System.Collections.Generic.IList<System.Int32?> IntArray { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "longArray")]
        public System.Collections.Generic.IList<System.Int64?> LongArray { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberArray")]
        public System.Collections.Generic.IList<System.Double?> NumberArray { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "floatArray")]
        public System.Collections.Generic.IList<System.Double?> FloatArray { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "doubleArray")]
        public System.Collections.Generic.IList<System.Double?> DoubleArray { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "byteArray")]
        public System.Collections.Generic.IList<System.Byte[]> ByteArray { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "booleanArray")]
        public System.Collections.Generic.IList<System.Boolean?> BooleanArray { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "stringArray")]
        public System.Collections.Generic.IList<System.String> StringArray { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "base64urlArray")]
        public System.Collections.Generic.IList<System.Byte[]> Base64urlArray { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dateArray")]
        public System.Collections.Generic.IList<System.DateTime?> DateArray { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dateTimeArray")]
        public System.Collections.Generic.IList<System.DateTime?> DateTimeArray { get; set; }

        /// <summary>
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uuidArray")]
        public System.Collections.Generic.IList<System.Guid?> UuidArray { get; set; }

    }
}
