// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Fixtures.AcceptanceTestsBodyDictionary
{
    using System.Threading.Tasks;
   using Models;

    /// <summary>
    /// Extension methods for Dictionary.
    /// </summary>
    public static partial class DictionaryExtensions
    {
            /// <summary>
            /// Get null dictionary value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Int32?> GetNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get null dictionary value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Int32?>> GetNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get empty dictionary value {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Int32?> GetEmpty(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetEmptyAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get empty dictionary value {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Int32?>> GetEmptyAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value empty {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutEmpty(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.String> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutEmptyAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value empty {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutEmptyAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.String> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutEmptyWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get Dictionary with null value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.String> GetNullValue(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetNullValueAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Dictionary with null value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.String>> GetNullValueAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetNullValueWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Dictionary with null key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.String> GetNullKey(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetNullKeyAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Dictionary with null key
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.String>> GetNullKeyAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetNullKeyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Dictionary with key as empty string
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.String> GetEmptyStringKey(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetEmptyStringKeyAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Dictionary with key as empty string
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.String>> GetEmptyStringKeyAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetEmptyStringKeyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get invalid Dictionary value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.String> GetInvalid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetInvalidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get invalid Dictionary value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.String>> GetInvalidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetInvalidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true
            /// }
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Boolean?> GetBooleanTfft(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetBooleanTfftAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean dictionary value {"0": true, "1": false, "2": false, "3": true
            /// }
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Boolean?>> GetBooleanTfftAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetBooleanTfftWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutBooleanTfft(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Boolean?> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutBooleanTfftAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value empty {"0": true, "1": false, "2": false, "3": true }
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutBooleanTfftAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Boolean?> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutBooleanTfftWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get boolean dictionary value {"0": true, "1": null, "2": false }
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Boolean?> GetBooleanInvalidNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetBooleanInvalidNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean dictionary value {"0": true, "1": null, "2": false }
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Boolean?>> GetBooleanInvalidNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetBooleanInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Boolean?> GetBooleanInvalidString(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetBooleanInvalidStringAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean dictionary value '{"0": true, "1": "boolean", "2": false}'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Boolean?>> GetBooleanInvalidStringAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetBooleanInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Int32?> GetIntegerValid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetIntegerValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Int32?>> GetIntegerValidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetIntegerValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutIntegerValid(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Int32?> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutIntegerValidAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutIntegerValidAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Int32?> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutIntegerValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": null, "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Int32?> GetIntInvalidNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetIntInvalidNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": null, "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Int32?>> GetIntInvalidNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetIntInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Int32?> GetIntInvalidString(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetIntInvalidStringAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": "integer", "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Int32?>> GetIntInvalidStringAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetIntInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Int64?> GetLongValid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetLongValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer dictionary value {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Int64?>> GetLongValidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLongValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutLongValid(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Int64?> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutLongValidAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value empty {"0": 1, "1": -1, "2": 3, "3": 300}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutLongValidAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Int64?> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutLongValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get long dictionary value {"0": 1, "1": null, "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Int64?> GetLongInvalidNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetLongInvalidNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get long dictionary value {"0": 1, "1": null, "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Int64?>> GetLongInvalidNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLongInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get long dictionary value {"0": 1, "1": "integer", "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Int64?> GetLongInvalidString(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetLongInvalidStringAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get long dictionary value {"0": 1, "1": "integer", "2": 0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Int64?>> GetLongInvalidStringAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetLongInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Double?> GetFloatValid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetFloatValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Double?>> GetFloatValidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetFloatValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutFloatValid(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Double?> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutFloatValidAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutFloatValidAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Double?> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutFloatValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Double?> GetFloatInvalidNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetFloatInvalidNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Double?>> GetFloatInvalidNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetFloatInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Double?> GetFloatInvalidString(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetFloatInvalidStringAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Double?>> GetFloatInvalidStringAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetFloatInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Double?> GetDoubleValid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDoubleValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get float dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Double?>> GetDoubleValidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDoubleValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDoubleValid(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Double?> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutDoubleValidAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value {"0": 0, "1": -0.01, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutDoubleValidAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Double?> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutDoubleValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Double?> GetDoubleInvalidNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDoubleInvalidNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get float dictionary value {"0": 0.0, "1": null, "2": 1.2e20}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Double?>> GetDoubleInvalidNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDoubleInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Double?> GetDoubleInvalidString(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDoubleInvalidStringAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get boolean dictionary value {"0": 1.0, "1": "number", "2": 0.0}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Double?>> GetDoubleInvalidStringAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDoubleInvalidStringWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.String> GetStringValid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetStringValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get string dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.String>> GetStringValidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetStringValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutStringValid(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.String> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutStringValidAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value {"0": "foo1", "1": "foo2", "2": "foo3"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutStringValidAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.String> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutStringValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.String> GetStringWithNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetStringWithNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get string dictionary value {"0": "foo", "1": null, "2": "foo2"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.String>> GetStringWithNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetStringWithNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.String> GetStringWithInvalid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetStringWithInvalidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get string dictionary value {"0": "foo", "1": 123, "2": "foo2"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.String>> GetStringWithInvalidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetStringWithInvalidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2":
            /// "1492-10-12"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.DateTime?> GetDateValid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDateValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get integer dictionary value {"0": "2000-12-01", "1": "1980-01-02", "2":
            /// "1492-10-12"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.DateTime?>> GetDateValidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDateValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2":
            /// "1492-10-12"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDateValid(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.DateTime?> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutDateValidAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value  {"0": "2000-12-01", "1": "1980-01-02", "2":
            /// "1492-10-12"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutDateValidAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.DateTime?> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutDateValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.DateTime?> GetDateInvalidNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDateInvalidNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date dictionary value {"0": "2012-01-01", "1": null, "2": "1776-07-04"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.DateTime?>> GetDateInvalidNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDateInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get date dictionary value {"0": "2011-03-22", "1": "date"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.DateTime?> GetDateInvalidChars(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDateInvalidCharsAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date dictionary value {"0": "2011-03-22", "1": "date"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.DateTime?>> GetDateInvalidCharsAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDateInvalidCharsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1":
            /// "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.DateTime?> GetDateTimeValid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDateTimeValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date-time dictionary value {"0": "2000-12-01t00:00:01z", "1":
            /// "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.DateTime?>> GetDateTimeValidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDateTimeValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value  {"0": "2000-12-01t00:00:01z", "1":
            /// "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDateTimeValid(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.DateTime?> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutDateTimeValidAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value  {"0": "2000-12-01t00:00:01z", "1":
            /// "1980-01-02T00:11:35+01:00", "2": "1492-10-12T10:15:01-08:00"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutDateTimeValidAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.DateTime?> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutDateTimeValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.DateTime?> GetDateTimeInvalidNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDateTimeInvalidNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": null}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.DateTime?>> GetDateTimeInvalidNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDateTimeInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.DateTime?> GetDateTimeInvalidChars(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDateTimeInvalidCharsAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date dictionary value {"0": "2000-12-01t00:00:01z", "1": "date-time"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.DateTime?>> GetDateTimeInvalidCharsAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDateTimeInvalidCharsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01
            /// GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492
            /// 10:15:01 GMT"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.DateTime?> GetDateTimeRfc1123Valid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDateTimeRfc1123ValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get date-time-rfc1123 dictionary value {"0": "Fri, 01 Dec 2000 00:00:01
            /// GMT", "1": "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492
            /// 10:15:01 GMT"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.DateTime?>> GetDateTimeRfc1123ValidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDateTimeRfc1123ValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1":
            /// "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDateTimeRfc1123Valid(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.DateTime?> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutDateTimeRfc1123ValidAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value empty {"0": "Fri, 01 Dec 2000 00:00:01 GMT", "1":
            /// "Wed, 02 Jan 1980 00:11:35 GMT", "2": "Wed, 12 Oct 1492 10:15:01 GMT"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutDateTimeRfc1123ValidAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.DateTime?> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutDateTimeRfc1123ValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get duration dictionary value {"0": "P123DT22H14M12.011S", "1":
            /// "P5DT1H0M0S"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.TimeSpan?> GetDurationValid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDurationValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get duration dictionary value {"0": "P123DT22H14M12.011S", "1":
            /// "P5DT1H0M0S"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.TimeSpan?>> GetDurationValidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDurationValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDurationValid(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.TimeSpan?> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutDurationValidAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Set dictionary value  {"0": "P123DT22H14M12.011S", "1": "P5DT1H0M0S"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutDurationValidAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.TimeSpan?> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutDurationValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2":
            /// hex (25, 29, 43)} with each item encoded in base64
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Byte[]> GetByteValid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetByteValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get byte dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2":
            /// hex (25, 29, 43)} with each item encoded in base64
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Byte[]>> GetByteValidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetByteValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2":
            /// hex (25, 29, 43)} with each elementencoded in base 64
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutByteValid(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Byte[]> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutByteValidAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put the dictionary value {"0": hex(FF FF FF FA), "1": hex(01 02 03), "2":
            /// hex (25, 29, 43)} with each elementencoded in base 64
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutByteValidAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Byte[]> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutByteValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the
            /// first item base64 encoded
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Byte[]> GetByteInvalidNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetByteInvalidNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get byte dictionary value {"0": hex(FF FF FF FA), "1": null} with the
            /// first item base64 encoded
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Byte[]>> GetByteInvalidNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetByteInvalidNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get base64url dictionary value {"0": "a string that gets encoded with
            /// base64url", "1": "test string", "2": "Lorem ipsum"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Byte[]> GetBase64Url(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetBase64UrlAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get base64url dictionary value {"0": "a string that gets encoded with
            /// base64url", "1": "test string", "2": "Lorem ipsum"}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Byte[]>> GetBase64UrlAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetBase64UrlWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get dictionary of complex type null value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, Widget> GetComplexNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetComplexNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get dictionary of complex type null value
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, Widget>> GetComplexNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetComplexNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get empty dictionary of complex type {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, Widget> GetComplexEmpty(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetComplexEmptyAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get empty dictionary of complex type {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, Widget>> GetComplexEmptyAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetComplexEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get dictionary of complex type with null item {"0": {"integer": 1,
            /// "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, Widget> GetComplexItemNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetComplexItemNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get dictionary of complex type with null item {"0": {"integer": 1,
            /// "string": "2"}, "1": null, "2": {"integer": 5, "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, Widget>> GetComplexItemNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetComplexItemNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get dictionary of complex type with empty item {"0": {"integer": 1,
            /// "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, Widget> GetComplexItemEmpty(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetComplexItemEmptyAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get dictionary of complex type with empty item {"0": {"integer": 1,
            /// "string": "2"}, "1:" {}, "2": {"integer": 5, "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, Widget>> GetComplexItemEmptyAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetComplexItemEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get dictionary of complex type with {"0": {"integer": 1, "string": "2"},
            /// "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, Widget> GetComplexValid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetComplexValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get dictionary of complex type with {"0": {"integer": 1, "string": "2"},
            /// "1": {"integer": 3, "string": "4"}, "2": {"integer": 5, "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, Widget>> GetComplexValidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetComplexValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put an dictionary of complex type with values {"0": {"integer": 1,
            /// "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5,
            /// "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutComplexValid(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, Widget> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutComplexValidAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put an dictionary of complex type with values {"0": {"integer": 1,
            /// "string": "2"}, "1": {"integer": 3, "string": "4"}, "2": {"integer": 5,
            /// "string": "6"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutComplexValidAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, Widget> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutComplexValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get a null array
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<System.String>> GetArrayNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetArrayNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a null array
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<System.String>>> GetArrayNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetArrayNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an empty dictionary {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<System.String>> GetArrayEmpty(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetArrayEmptyAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an empty dictionary {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<System.String>>> GetArrayEmptyAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetArrayEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null,
            /// "2": ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<System.String>> GetArrayItemNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetArrayItemNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an dictionary of array of strings {"0": ["1", "2", "3"], "1": null,
            /// "2": ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<System.String>>> GetArrayItemNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetArrayItemNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2":
            /// ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<System.String>> GetArrayItemEmpty(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetArrayItemEmptyAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an array of array of strings [{"0": ["1", "2", "3"], "1": [], "2":
            /// ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<System.String>>> GetArrayItemEmptyAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetArrayItemEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5",
            /// "6"], "2": ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<System.String>> GetArrayValid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetArrayValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5",
            /// "6"], "2": ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<System.String>>> GetArrayValidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetArrayValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5",
            /// "6"], "2": ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutArrayValid(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<System.String>> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutArrayValidAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Put An array of array of strings {"0": ["1", "2", "3"], "1": ["4", "5",
            /// "6"], "2": ["7", "8", "9"]}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutArrayValidAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IList<System.String>> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutArrayValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

            /// <summary>
            /// Get an dictionaries of dictionaries with value null
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IDictionary<System.String, System.String>> GetDictionaryNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDictionaryNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an dictionaries of dictionaries with value null
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IDictionary<System.String, System.String>>> GetDictionaryNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDictionaryNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IDictionary<System.String, System.String>> GetDictionaryEmpty(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDictionaryEmptyAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IDictionary<System.String, System.String>>> GetDictionaryEmptyAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDictionaryEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7":
            /// "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IDictionary<System.String, System.String>> GetDictionaryItemNull(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDictionaryItemNullAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": null, "2": {"7":
            /// "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IDictionary<System.String, System.String>>> GetDictionaryItemNullAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDictionaryItemNullWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7":
            /// "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IDictionary<System.String, System.String>> GetDictionaryItemEmpty(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDictionaryItemEmptyAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {}, "2": {"7":
            /// "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IDictionary<System.String, System.String>>> GetDictionaryItemEmptyAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDictionaryItemEmptyWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four",
            /// "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IDictionary<System.String, System.String>> GetDictionaryValid(this IDictionary operations)
            {
                return System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).GetDictionaryValidAsync(), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None, System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four",
            /// "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IDictionary<System.String, System.String>>> GetDictionaryValidAsync(this IDictionary operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetDictionaryValidWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four",
            /// "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            public static void PutDictionaryValid(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IDictionary<System.String, System.String>> arrayBody)
            {
                System.Threading.Tasks.Task.Factory.StartNew(s => ((IDictionary)s).PutDictionaryValidAsync(arrayBody), operations, System.Threading.CancellationToken.None, System.Threading.Tasks.TaskCreationOptions.None,  System.Threading.Tasks.TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an dictionaries of dictionaries of type &lt;string, string&gt; with
            /// value {"0": {"1": "one", "2": "two", "3": "three"}, "1": {"4": "four",
            /// "5": "five", "6": "six"}, "2": {"7": "seven", "8": "eight", "9": "nine"}}
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='arrayBody'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async System.Threading.Tasks.Task PutDictionaryValidAsync(this IDictionary operations, System.Collections.Generic.IDictionary<System.String, System.Collections.Generic.IDictionary<System.String, System.String>> arrayBody, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                await operations.PutDictionaryValidWithHttpMessagesAsync(arrayBody, null, cancellationToken).ConfigureAwait(false);
            }

    }
}
