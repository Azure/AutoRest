@using AutoRest.Go
@using AutoRest.Core.Model
@using AutoRest.Go.Model
@using AutoRest.Go.Templates
@using AutoRest.Core.Utilities

@inherits AutoRest.Core.Template<AutoRest.Go.Model.CompositeTypeGo>

@WrapComment("// ", string.Format("{0} is {1}", Model.Name, Model.Documentation.ToSentence()))
type @Model.Name struct {
@if (Model.IsResponseType)
{
    @:autorest.Response `json:"-"`
}
@if (!string.IsNullOrEmpty(Model.NextLink))
{
    @:client ManagementClient
}
    @(Model.Fields())
}

@if (!string.IsNullOrEmpty(Model.NextLink) && Model.PreparerNeeded)
{

@:// Next retrieves the next set of results, if any.
@:func (lastResults @(Model.Name)) Next() (result @(Model.Name), err error) {
    @:req, err := lastResults.NextPreparer()
    @:if err != nil {
        @:return result, @(Model.AutorestError("Failure preparing next results request"))
    @:}

    @:@EmptyLine
    @:resp, err := lastResults.NextSender(req)
    @:if err != nil {
        @:result.Response = autorest.Response{Response: resp}
        @:return result, @(Model.AutorestError("Failure sending next results request", "resp"))
    @:}

    @:@EmptyLine
    @:result, err = lastResults.NextResponder(resp)
    @:if err != nil {
        @:err = @(Model.AutorestError("Failure responding to next results request", "resp"))
    @:}

    @EmptyLine
    @:return
@:}

@:@EmptyLine
@:// NextPreparer prepares a request to retrieve the next set of results. It returns
@:// nil if no more results exist.
@:func (lastResults @(Model.Name)) NextPreparer() (*http.Request, error) {
    @:if lastResults.@(Model.NextLink) == nil || len(to.String(lastResults.@(Model.NextLink))) <= 0 {
        @:return nil, nil
    @:}
    @:return autorest.Prepare(&http.Request{},
        @:autorest.AsJSON(),
        @:autorest.AsGet(),
        @:autorest.WithBaseURL(to.String(lastResults.@(Model.NextLink))));
@:}

@:@EmptyLine
@:// NextSender sends the next results request to retrieve the next set of results. The
@:// method will close the http.Response Body if it receives an error.
@:func (lastResults @(Model.Name)) NextSender(req *http.Request) (*http.Response, error) {
    @:return autorest.SendWithSender(lastResults.client, req)
@:}

@EmptyLine
@:// NextResponder handles the response to the @(Model.Name)
@:// request. The method always closes the http.Response Body.
@:func (lastResults @(Model.Name)) NextResponder(resp *http.Response) (result @(Model.Name), err error) { 
    @:err = autorest.Respond(
            @:resp,
            @:lastResults.client.ByInspecting(),
            @:azure.WithErrorUnlessStatusCode(@(Model.ResponseCodes)),
            if (Model.IsWrapperType)
            {
            @:autorest.ByUnmarshallingJSON(&result.Value),
            }
            else
            {
            @:autorest.ByUnmarshallingJSON(&result),
            }
            @:autorest.ByClosing(),
    @:)

    @:result.Response = autorest.Response{Response: resp}
    @:result.client = lastResults.client
    @:return
@:}
}