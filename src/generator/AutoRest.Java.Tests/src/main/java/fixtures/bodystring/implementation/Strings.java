/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.bodystring.implementation;

import retrofit2.Retrofit;
import fixtures.bodystring.Strings;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.Base64Url;
import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseBuilder;
import fixtures.bodystring.models.ErrorException;
import java.io.IOException;
import models.enum;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.PUT;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Strings.
 */
public final class StringsImpl implements Strings {
    /** The Retrofit service to perform REST calls. */
    private StringsService service;
    /** The service client containing this operation class. */
    private stringsImpl client;

    /**
     * Initializes an instance of Strings.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public StringsImpl(Retrofit retrofit, stringsImpl client) {
        this.service = retrofit.create(StringsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Strings to be
     * used by Retrofit to perform actually REST calls.
     */
    interface StringsService {
        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("string/null")
        Observable<Response<ResponseBody>> getNull();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("string/null")
        Observable<Response<ResponseBody>> putNull(@Body enum stringBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("string/empty")
        Observable<Response<ResponseBody>> getEmpty();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("string/empty")
        Observable<Response<ResponseBody>> putEmpty(@Body enum stringBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("string/mbcs")
        Observable<Response<ResponseBody>> getMbcs();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("string/mbcs")
        Observable<Response<ResponseBody>> putMbcs(@Body enum stringBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("string/whitespace")
        Observable<Response<ResponseBody>> getWhitespace();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("string/whitespace")
        Observable<Response<ResponseBody>> putWhitespace(@Body enum stringBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("string/notProvided")
        Observable<Response<ResponseBody>> getNotProvided();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("string/base64Encoding")
        Observable<Response<ResponseBody>> getBase64Encoded();

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("string/base64UrlEncoding")
        Observable<Response<ResponseBody>> getBase64UrlEncoded();

        @Headers("Content-Type: application/json; charset=utf-8")
        @PUT("string/base64UrlEncoding")
        Observable<Response<ResponseBody>> putBase64UrlEncoded(@Body Base64Url stringBody);

        @Headers("Content-Type: application/json; charset=utf-8")
        @GET("string/nullBase64UrlEncoding")
        Observable<Response<ResponseBody>> getNullBase64UrlEncoded();

    }

    /**
     * Get null string value value.
     *
     * @return the enum object if successful.
     */
    public enum getNull() {
        return getNullWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get null string value value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<enum> getNullAsync(final ServiceCallback<enum> serviceCallback) {
        return ServiceCall.create(getNullWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get null string value value.
     *
     * @return the observable to the enum object
     */
    public Observable<enum> getNullAsync() {
        return getNullWithServiceResponseAsync().map(new Func1<ServiceResponse<enum>, enum>() {
            @Override
            public enum call(ServiceResponse<enum> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get null string value value.
     *
     * @return the observable to the enum object
     */
    public Observable<ServiceResponse<enum>> getNullWithServiceResponseAsync() {
        return service.getNull()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<enum>>>() {
                @Override
                public Observable<ServiceResponse<enum>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<enum> clientResponse = getNullDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<enum> getNullDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<enum, ErrorException>(this.Client.mapperAdapter())
                .register(200, new TypeToken<AutoRest.Java.Model.ResponseJv.GenericBodyWireTypeString>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Set string value null.
     *
     */
    public Void putNull() {
        return putNullWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Set string value null.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putNullAsync(final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putNullWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Set string value null.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putNullAsync() {
        return putNullWithServiceResponseAsync().map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Set string value null.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putNullWithServiceResponseAsync() {
        final enum stringBody = ;
        return service.putNull(stringBodyConverted)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putNullDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Set string value null.
     *
     * @param stringBody Possible values include: ''
     */
    public Void putNull(AutoRest.Java.Model.EnumTypeJv stringBody) {
        return putNullWithServiceResponseAsync(stringBody).toBlocking().single().getBody();
    }

    /**
     * Set string value null.
     *
     * @param stringBody Possible values include: ''
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putNullAsync(AutoRest.Java.Model.EnumTypeJv stringBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putNullWithServiceResponseAsync(stringBody), serviceCallback);
    }

    /**
     * Set string value null.
     *
     * @param stringBody Possible values include: ''
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putNullAsync(AutoRest.Java.Model.EnumTypeJv stringBody) {
        return putNullWithServiceResponseAsync(stringBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Set string value null.
     *
     * @param stringBody Possible values include: ''
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putNullWithServiceResponseAsync(AutoRest.Java.Model.EnumTypeJv stringBody) {
        return service.putNull(stringBodyConverted)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putNullDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putNullDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.Client.mapperAdapter())
                .register(200, new TypeToken<AutoRest.Java.Model.ResponseJv.GenericBodyWireTypeString>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get empty string value value ''.
     *
     * @return the enum object if successful.
     */
    public enum getEmpty() {
        return getEmptyWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get empty string value value ''.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<enum> getEmptyAsync(final ServiceCallback<enum> serviceCallback) {
        return ServiceCall.create(getEmptyWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get empty string value value ''.
     *
     * @return the observable to the enum object
     */
    public Observable<enum> getEmptyAsync() {
        return getEmptyWithServiceResponseAsync().map(new Func1<ServiceResponse<enum>, enum>() {
            @Override
            public enum call(ServiceResponse<enum> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get empty string value value ''.
     *
     * @return the observable to the enum object
     */
    public Observable<ServiceResponse<enum>> getEmptyWithServiceResponseAsync() {
        return service.getEmpty()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<enum>>>() {
                @Override
                public Observable<ServiceResponse<enum>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<enum> clientResponse = getEmptyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<enum> getEmptyDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<enum, ErrorException>(this.Client.mapperAdapter())
                .register(200, new TypeToken<AutoRest.Java.Model.ResponseJv.GenericBodyWireTypeString>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Set string value empty ''.
     *
     * @param stringBody Possible values include: ''
     */
    public Void putEmpty(AutoRest.Java.Model.EnumTypeJv stringBody) {
        return putEmptyWithServiceResponseAsync(stringBody).toBlocking().single().getBody();
    }

    /**
     * Set string value empty ''.
     *
     * @param stringBody Possible values include: ''
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putEmptyAsync(AutoRest.Java.Model.EnumTypeJv stringBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putEmptyWithServiceResponseAsync(stringBody), serviceCallback);
    }

    /**
     * Set string value empty ''.
     *
     * @param stringBody Possible values include: ''
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putEmptyAsync(AutoRest.Java.Model.EnumTypeJv stringBody) {
        return putEmptyWithServiceResponseAsync(stringBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Set string value empty ''.
     *
     * @param stringBody Possible values include: ''
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putEmptyWithServiceResponseAsync(AutoRest.Java.Model.EnumTypeJv stringBody) {
        if (stringBody == null) {
            throw new IllegalArgumentException("Parameter stringBody is required and cannot be null.");
        }
        return service.putEmpty(stringBodyConverted)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putEmptyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putEmptyDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.Client.mapperAdapter())
                .register(200, new TypeToken<AutoRest.Java.Model.ResponseJv.GenericBodyWireTypeString>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get mbcs string value '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '.
     *
     * @return the enum object if successful.
     */
    public enum getMbcs() {
        return getMbcsWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get mbcs string value '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<enum> getMbcsAsync(final ServiceCallback<enum> serviceCallback) {
        return ServiceCall.create(getMbcsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get mbcs string value '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '.
     *
     * @return the observable to the enum object
     */
    public Observable<enum> getMbcsAsync() {
        return getMbcsWithServiceResponseAsync().map(new Func1<ServiceResponse<enum>, enum>() {
            @Override
            public enum call(ServiceResponse<enum> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get mbcs string value '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '.
     *
     * @return the observable to the enum object
     */
    public Observable<ServiceResponse<enum>> getMbcsWithServiceResponseAsync() {
        return service.getMbcs()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<enum>>>() {
                @Override
                public Observable<ServiceResponse<enum>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<enum> clientResponse = getMbcsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<enum> getMbcsDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<enum, ErrorException>(this.Client.mapperAdapter())
                .register(200, new TypeToken<AutoRest.Java.Model.ResponseJv.GenericBodyWireTypeString>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Set string value mbcs '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '.
     *
     * @param stringBody Possible values include: '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '
     */
    public Void putMbcs(AutoRest.Java.Model.EnumTypeJv stringBody) {
        return putMbcsWithServiceResponseAsync(stringBody).toBlocking().single().getBody();
    }

    /**
     * Set string value mbcs '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '.
     *
     * @param stringBody Possible values include: '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putMbcsAsync(AutoRest.Java.Model.EnumTypeJv stringBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putMbcsWithServiceResponseAsync(stringBody), serviceCallback);
    }

    /**
     * Set string value mbcs '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '.
     *
     * @param stringBody Possible values include: '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putMbcsAsync(AutoRest.Java.Model.EnumTypeJv stringBody) {
        return putMbcsWithServiceResponseAsync(stringBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Set string value mbcs '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '.
     *
     * @param stringBody Possible values include: '啊齄丂狛狜隣郎隣兀﨩ˊ▇█〞〡￤℡㈱‐ー﹡﹢﹫、〓ⅰⅹ⒈€㈠㈩ⅠⅫ！￣ぁんァヶΑ︴АЯаяāɡㄅㄩ─╋︵﹄︻︱︳︴ⅰⅹɑɡ〇〾⿻⺁䜣€ '
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putMbcsWithServiceResponseAsync(AutoRest.Java.Model.EnumTypeJv stringBody) {
        if (stringBody == null) {
            throw new IllegalArgumentException("Parameter stringBody is required and cannot be null.");
        }
        return service.putMbcs(stringBodyConverted)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putMbcsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putMbcsDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.Client.mapperAdapter())
                .register(200, new TypeToken<AutoRest.Java.Model.ResponseJv.GenericBodyWireTypeString>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get string value with leading and trailing whitespace '&lt;tab&gt;&lt;space&gt;&lt;space&gt;Now is the time for all good men to come to the aid of their country&lt;tab&gt;&lt;space&gt;&lt;space&gt;'.
     *
     * @return the enum object if successful.
     */
    public enum getWhitespace() {
        return getWhitespaceWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get string value with leading and trailing whitespace '&lt;tab&gt;&lt;space&gt;&lt;space&gt;Now is the time for all good men to come to the aid of their country&lt;tab&gt;&lt;space&gt;&lt;space&gt;'.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<enum> getWhitespaceAsync(final ServiceCallback<enum> serviceCallback) {
        return ServiceCall.create(getWhitespaceWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get string value with leading and trailing whitespace '&lt;tab&gt;&lt;space&gt;&lt;space&gt;Now is the time for all good men to come to the aid of their country&lt;tab&gt;&lt;space&gt;&lt;space&gt;'.
     *
     * @return the observable to the enum object
     */
    public Observable<enum> getWhitespaceAsync() {
        return getWhitespaceWithServiceResponseAsync().map(new Func1<ServiceResponse<enum>, enum>() {
            @Override
            public enum call(ServiceResponse<enum> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get string value with leading and trailing whitespace '&lt;tab&gt;&lt;space&gt;&lt;space&gt;Now is the time for all good men to come to the aid of their country&lt;tab&gt;&lt;space&gt;&lt;space&gt;'.
     *
     * @return the observable to the enum object
     */
    public Observable<ServiceResponse<enum>> getWhitespaceWithServiceResponseAsync() {
        return service.getWhitespace()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<enum>>>() {
                @Override
                public Observable<ServiceResponse<enum>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<enum> clientResponse = getWhitespaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<enum> getWhitespaceDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<enum, ErrorException>(this.Client.mapperAdapter())
                .register(200, new TypeToken<AutoRest.Java.Model.ResponseJv.GenericBodyWireTypeString>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Set String value with leading and trailing whitespace '&lt;tab&gt;&lt;space&gt;&lt;space&gt;Now is the time for all good men to come to the aid of their country&lt;tab&gt;&lt;space&gt;&lt;space&gt;'.
     *
     * @param stringBody Possible values include: '    Now is the time for all good men to come to the aid of their country    '
     */
    public Void putWhitespace(AutoRest.Java.Model.EnumTypeJv stringBody) {
        return putWhitespaceWithServiceResponseAsync(stringBody).toBlocking().single().getBody();
    }

    /**
     * Set String value with leading and trailing whitespace '&lt;tab&gt;&lt;space&gt;&lt;space&gt;Now is the time for all good men to come to the aid of their country&lt;tab&gt;&lt;space&gt;&lt;space&gt;'.
     *
     * @param stringBody Possible values include: '    Now is the time for all good men to come to the aid of their country    '
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putWhitespaceAsync(AutoRest.Java.Model.EnumTypeJv stringBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putWhitespaceWithServiceResponseAsync(stringBody), serviceCallback);
    }

    /**
     * Set String value with leading and trailing whitespace '&lt;tab&gt;&lt;space&gt;&lt;space&gt;Now is the time for all good men to come to the aid of their country&lt;tab&gt;&lt;space&gt;&lt;space&gt;'.
     *
     * @param stringBody Possible values include: '    Now is the time for all good men to come to the aid of their country    '
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putWhitespaceAsync(AutoRest.Java.Model.EnumTypeJv stringBody) {
        return putWhitespaceWithServiceResponseAsync(stringBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Set String value with leading and trailing whitespace '&lt;tab&gt;&lt;space&gt;&lt;space&gt;Now is the time for all good men to come to the aid of their country&lt;tab&gt;&lt;space&gt;&lt;space&gt;'.
     *
     * @param stringBody Possible values include: '    Now is the time for all good men to come to the aid of their country    '
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putWhitespaceWithServiceResponseAsync(AutoRest.Java.Model.EnumTypeJv stringBody) {
        if (stringBody == null) {
            throw new IllegalArgumentException("Parameter stringBody is required and cannot be null.");
        }
        return service.putWhitespace(stringBodyConverted)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putWhitespaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putWhitespaceDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.Client.mapperAdapter())
                .register(200, new TypeToken<AutoRest.Java.Model.ResponseJv.GenericBodyWireTypeString>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get String value when no string value is sent in response payload.
     *
     * @return the String object if successful.
     */
    public String getNotProvided() {
        return getNotProvidedWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get String value when no string value is sent in response payload.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<String> getNotProvidedAsync(final ServiceCallback<String> serviceCallback) {
        return ServiceCall.create(getNotProvidedWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get String value when no string value is sent in response payload.
     *
     * @return the observable to the String object
     */
    public Observable<String> getNotProvidedAsync() {
        return getNotProvidedWithServiceResponseAsync().map(new Func1<ServiceResponse<String>, String>() {
            @Override
            public String call(ServiceResponse<String> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get String value when no string value is sent in response payload.
     *
     * @return the observable to the String object
     */
    public Observable<ServiceResponse<String>> getNotProvidedWithServiceResponseAsync() {
        return service.getNotProvided()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<String>>>() {
                @Override
                public Observable<ServiceResponse<String>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<String> clientResponse = getNotProvidedDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<String> getNotProvidedDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<String, ErrorException>(this.Client.mapperAdapter())
                .register(200, new TypeToken<AutoRest.Java.Model.ResponseJv.GenericBodyWireTypeString>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get value that is base64 encoded.
     *
     * @return the byte[] object if successful.
     */
    public byte[] getBase64Encoded() {
        return getBase64EncodedWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get value that is base64 encoded.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<byte[]> getBase64EncodedAsync(final ServiceCallback<byte[]> serviceCallback) {
        return ServiceCall.create(getBase64EncodedWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get value that is base64 encoded.
     *
     * @return the observable to the byte[] object
     */
    public Observable<byte[]> getBase64EncodedAsync() {
        return getBase64EncodedWithServiceResponseAsync().map(new Func1<ServiceResponse<byte[]>, byte[]>() {
            @Override
            public byte[] call(ServiceResponse<byte[]> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get value that is base64 encoded.
     *
     * @return the observable to the byte[] object
     */
    public Observable<ServiceResponse<byte[]>> getBase64EncodedWithServiceResponseAsync() {
        return service.getBase64Encoded()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<byte[]>>>() {
                @Override
                public Observable<ServiceResponse<byte[]>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Base64Url> result = getBase64EncodedDelegate(response);
                        AutoRest.Java.Model.PrimaryTypeJv body = null;
                        if (result.getBody() != null) {
                            body = result.getBody().getDecodedBytes();
                        }
                        ServiceResponse<byte[]> clientResponse = new ServiceResponse<byte[]>(body, result.getResponse());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Base64Url> getBase64EncodedDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Base64Url, ErrorException>(this.Client.mapperAdapter())
                .register(200, new TypeToken<AutoRest.Java.Model.ResponseJv.GenericBodyWireTypeString>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get value that is base64url encoded.
     *
     * @return the byte[] object if successful.
     */
    public byte[] getBase64UrlEncoded() {
        return getBase64UrlEncodedWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get value that is base64url encoded.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<byte[]> getBase64UrlEncodedAsync(final ServiceCallback<byte[]> serviceCallback) {
        return ServiceCall.create(getBase64UrlEncodedWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get value that is base64url encoded.
     *
     * @return the observable to the byte[] object
     */
    public Observable<byte[]> getBase64UrlEncodedAsync() {
        return getBase64UrlEncodedWithServiceResponseAsync().map(new Func1<ServiceResponse<byte[]>, byte[]>() {
            @Override
            public byte[] call(ServiceResponse<byte[]> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get value that is base64url encoded.
     *
     * @return the observable to the byte[] object
     */
    public Observable<ServiceResponse<byte[]>> getBase64UrlEncodedWithServiceResponseAsync() {
        return service.getBase64UrlEncoded()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<byte[]>>>() {
                @Override
                public Observable<ServiceResponse<byte[]>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Base64Url> result = getBase64UrlEncodedDelegate(response);
                        AutoRest.Java.Model.PrimaryTypeJv body = null;
                        if (result.getBody() != null) {
                            body = result.getBody().getDecodedBytes();
                        }
                        ServiceResponse<byte[]> clientResponse = new ServiceResponse<byte[]>(body, result.getResponse());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Base64Url> getBase64UrlEncodedDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Base64Url, ErrorException>(this.Client.mapperAdapter())
                .register(200, new TypeToken<AutoRest.Java.Model.ResponseJv.GenericBodyWireTypeString>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Put value that is base64url encoded.
     *
     * @param stringBody the AutoRest.Java.Model.PrimaryTypeJv value
     */
    public Void putBase64UrlEncoded(AutoRest.Java.Model.PrimaryTypeJv stringBody) {
        return putBase64UrlEncodedWithServiceResponseAsync(stringBody).toBlocking().single().getBody();
    }

    /**
     * Put value that is base64url encoded.
     *
     * @param stringBody the AutoRest.Java.Model.PrimaryTypeJv value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<Void> putBase64UrlEncodedAsync(AutoRest.Java.Model.PrimaryTypeJv stringBody, final ServiceCallback<Void> serviceCallback) {
        return ServiceCall.create(putBase64UrlEncodedWithServiceResponseAsync(stringBody), serviceCallback);
    }

    /**
     * Put value that is base64url encoded.
     *
     * @param stringBody the AutoRest.Java.Model.PrimaryTypeJv value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> putBase64UrlEncodedAsync(AutoRest.Java.Model.PrimaryTypeJv stringBody) {
        return putBase64UrlEncodedWithServiceResponseAsync(stringBody).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Put value that is base64url encoded.
     *
     * @param stringBody the AutoRest.Java.Model.PrimaryTypeJv value
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> putBase64UrlEncodedWithServiceResponseAsync(AutoRest.Java.Model.PrimaryTypeJv stringBody) {
        if (stringBody == null) {
            throw new IllegalArgumentException("Parameter stringBody is required and cannot be null.");
        }
        return service.putBase64UrlEncoded(stringBodyConverted)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = putBase64UrlEncodedDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> putBase64UrlEncodedDelegate(Response<ResponseBody> response) throws ErrorException, IOException, IllegalArgumentException {
        return new ServiceResponseBuilder<Void, ErrorException>(this.Client.mapperAdapter())
                .register(200, new TypeToken<AutoRest.Java.Model.ResponseJv.GenericBodyWireTypeString>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

    /**
     * Get null value that is expected to be base64url encoded.
     *
     * @return the byte[] object if successful.
     */
    public byte[] getNullBase64UrlEncoded() {
        return getNullBase64UrlEncodedWithServiceResponseAsync().toBlocking().single().getBody();
    }

    /**
     * Get null value that is expected to be base64url encoded.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    public ServiceCall<byte[]> getNullBase64UrlEncodedAsync(final ServiceCallback<byte[]> serviceCallback) {
        return ServiceCall.create(getNullBase64UrlEncodedWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get null value that is expected to be base64url encoded.
     *
     * @return the observable to the byte[] object
     */
    public Observable<byte[]> getNullBase64UrlEncodedAsync() {
        return getNullBase64UrlEncodedWithServiceResponseAsync().map(new Func1<ServiceResponse<byte[]>, byte[]>() {
            @Override
            public byte[] call(ServiceResponse<byte[]> response) {
                return response.getBody();
            }
        });
    }

    /**
     * Get null value that is expected to be base64url encoded.
     *
     * @return the observable to the byte[] object
     */
    public Observable<ServiceResponse<byte[]>> getNullBase64UrlEncodedWithServiceResponseAsync() {
        return service.getNullBase64UrlEncoded()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<byte[]>>>() {
                @Override
                public Observable<ServiceResponse<byte[]>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Base64Url> result = getNullBase64UrlEncodedDelegate(response);
                        AutoRest.Java.Model.PrimaryTypeJv body = null;
                        if (result.getBody() != null) {
                            body = result.getBody().getDecodedBytes();
                        }
                        ServiceResponse<byte[]> clientResponse = new ServiceResponse<byte[]>(body, result.getResponse());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Base64Url> getNullBase64UrlEncodedDelegate(Response<ResponseBody> response) throws ErrorException, IOException {
        return new ServiceResponseBuilder<Base64Url, ErrorException>(this.Client.mapperAdapter())
                .register(200, new TypeToken<AutoRest.Java.Model.ResponseJv.GenericBodyWireTypeString>() { }.getType())
                .registerError(ErrorException.class)
                .build(response);
    }

}
