/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package fixtures.url.implementation;

import com.microsoft.rest.ServiceCall;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceResponse;
import java.util.List;
import models.UriColor;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Queries.
 */
public interface Queries {
    /**
     * Get true Boolean value on path.
     *
     */
    .ResponseVariant.Name getBooleanTrue();

    /**
     * Get true Boolean value on path.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getBooleanTrueAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get true Boolean value on path.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getBooleanTrueAsync();

    /**
     * Get true Boolean value on path.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getBooleanTrueWithServiceResponseAsync();

    /**
     * Get false Boolean value on path.
     *
     */
    .ResponseVariant.Name getBooleanFalse();

    /**
     * Get false Boolean value on path.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getBooleanFalseAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get false Boolean value on path.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getBooleanFalseAsync();

    /**
     * Get false Boolean value on path.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getBooleanFalseWithServiceResponseAsync();

    /**
     * Get null Boolean value on query (query string should be absent).
     *
     */
    .ResponseVariant.Name getBooleanNull();

    /**
     * Get null Boolean value on query (query string should be absent).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getBooleanNullAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get null Boolean value on query (query string should be absent).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getBooleanNullAsync();

    /**
     * Get null Boolean value on query (query string should be absent).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getBooleanNullWithServiceResponseAsync();
    /**
     * Get null Boolean value on query (query string should be absent).
     *
     * @param boolQuery null boolean value
     */
    .ResponseVariant.Name getBooleanNull(AutoRest.Java.Model.PrimaryTypeJv boolQuery);

    /**
     * Get null Boolean value on query (query string should be absent).
     *
     * @param boolQuery null boolean value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getBooleanNullAsync(AutoRest.Java.Model.PrimaryTypeJv boolQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get null Boolean value on query (query string should be absent).
     *
     * @param boolQuery null boolean value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getBooleanNullAsync(AutoRest.Java.Model.PrimaryTypeJv boolQuery);

    /**
     * Get null Boolean value on query (query string should be absent).
     *
     * @param boolQuery null boolean value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getBooleanNullWithServiceResponseAsync(AutoRest.Java.Model.PrimaryTypeJv boolQuery);

    /**
     * Get '1000000' integer value.
     *
     */
    .ResponseVariant.Name getIntOneMillion();

    /**
     * Get '1000000' integer value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getIntOneMillionAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '1000000' integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getIntOneMillionAsync();

    /**
     * Get '1000000' integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getIntOneMillionWithServiceResponseAsync();

    /**
     * Get '-1000000' integer value.
     *
     */
    .ResponseVariant.Name getIntNegativeOneMillion();

    /**
     * Get '-1000000' integer value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getIntNegativeOneMillionAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '-1000000' integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getIntNegativeOneMillionAsync();

    /**
     * Get '-1000000' integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getIntNegativeOneMillionWithServiceResponseAsync();

    /**
     * Get null integer value (no query parameter).
     *
     */
    .ResponseVariant.Name getIntNull();

    /**
     * Get null integer value (no query parameter).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getIntNullAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get null integer value (no query parameter).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getIntNullAsync();

    /**
     * Get null integer value (no query parameter).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getIntNullWithServiceResponseAsync();
    /**
     * Get null integer value (no query parameter).
     *
     * @param intQuery null integer value
     */
    .ResponseVariant.Name getIntNull(AutoRest.Java.Model.PrimaryTypeJv intQuery);

    /**
     * Get null integer value (no query parameter).
     *
     * @param intQuery null integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getIntNullAsync(AutoRest.Java.Model.PrimaryTypeJv intQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get null integer value (no query parameter).
     *
     * @param intQuery null integer value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getIntNullAsync(AutoRest.Java.Model.PrimaryTypeJv intQuery);

    /**
     * Get null integer value (no query parameter).
     *
     * @param intQuery null integer value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getIntNullWithServiceResponseAsync(AutoRest.Java.Model.PrimaryTypeJv intQuery);

    /**
     * Get '10000000000' 64 bit integer value.
     *
     */
    .ResponseVariant.Name getTenBillion();

    /**
     * Get '10000000000' 64 bit integer value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getTenBillionAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '10000000000' 64 bit integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getTenBillionAsync();

    /**
     * Get '10000000000' 64 bit integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getTenBillionWithServiceResponseAsync();

    /**
     * Get '-10000000000' 64 bit integer value.
     *
     */
    .ResponseVariant.Name getNegativeTenBillion();

    /**
     * Get '-10000000000' 64 bit integer value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getNegativeTenBillionAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '-10000000000' 64 bit integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getNegativeTenBillionAsync();

    /**
     * Get '-10000000000' 64 bit integer value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getNegativeTenBillionWithServiceResponseAsync();

    /**
     * Get 'null 64 bit integer value (no query param in uri).
     *
     */
    .ResponseVariant.Name getLongNull();

    /**
     * Get 'null 64 bit integer value (no query param in uri).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getLongNullAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get 'null 64 bit integer value (no query param in uri).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getLongNullAsync();

    /**
     * Get 'null 64 bit integer value (no query param in uri).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getLongNullWithServiceResponseAsync();
    /**
     * Get 'null 64 bit integer value (no query param in uri).
     *
     * @param longQuery null 64 bit integer value
     */
    .ResponseVariant.Name getLongNull(AutoRest.Java.Model.PrimaryTypeJv longQuery);

    /**
     * Get 'null 64 bit integer value (no query param in uri).
     *
     * @param longQuery null 64 bit integer value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> getLongNullAsync(AutoRest.Java.Model.PrimaryTypeJv longQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get 'null 64 bit integer value (no query param in uri).
     *
     * @param longQuery null 64 bit integer value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> getLongNullAsync(AutoRest.Java.Model.PrimaryTypeJv longQuery);

    /**
     * Get 'null 64 bit integer value (no query param in uri).
     *
     * @param longQuery null 64 bit integer value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> getLongNullWithServiceResponseAsync(AutoRest.Java.Model.PrimaryTypeJv longQuery);

    /**
     * Get '1.034E+20' numeric value.
     *
     */
    .ResponseVariant.Name floatScientificPositive();

    /**
     * Get '1.034E+20' numeric value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> floatScientificPositiveAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '1.034E+20' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> floatScientificPositiveAsync();

    /**
     * Get '1.034E+20' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> floatScientificPositiveWithServiceResponseAsync();

    /**
     * Get '-1.034E-20' numeric value.
     *
     */
    .ResponseVariant.Name floatScientificNegative();

    /**
     * Get '-1.034E-20' numeric value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> floatScientificNegativeAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '-1.034E-20' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> floatScientificNegativeAsync();

    /**
     * Get '-1.034E-20' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> floatScientificNegativeWithServiceResponseAsync();

    /**
     * Get null numeric value (no query parameter).
     *
     */
    .ResponseVariant.Name floatNull();

    /**
     * Get null numeric value (no query parameter).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> floatNullAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get null numeric value (no query parameter).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> floatNullAsync();

    /**
     * Get null numeric value (no query parameter).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> floatNullWithServiceResponseAsync();
    /**
     * Get null numeric value (no query parameter).
     *
     * @param floatQuery null numeric value
     */
    .ResponseVariant.Name floatNull(AutoRest.Java.Model.PrimaryTypeJv floatQuery);

    /**
     * Get null numeric value (no query parameter).
     *
     * @param floatQuery null numeric value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> floatNullAsync(AutoRest.Java.Model.PrimaryTypeJv floatQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get null numeric value (no query parameter).
     *
     * @param floatQuery null numeric value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> floatNullAsync(AutoRest.Java.Model.PrimaryTypeJv floatQuery);

    /**
     * Get null numeric value (no query parameter).
     *
     * @param floatQuery null numeric value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> floatNullWithServiceResponseAsync(AutoRest.Java.Model.PrimaryTypeJv floatQuery);

    /**
     * Get '9999999.999' numeric value.
     *
     */
    .ResponseVariant.Name doubleDecimalPositive();

    /**
     * Get '9999999.999' numeric value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> doubleDecimalPositiveAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '9999999.999' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> doubleDecimalPositiveAsync();

    /**
     * Get '9999999.999' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> doubleDecimalPositiveWithServiceResponseAsync();

    /**
     * Get '-9999999.999' numeric value.
     *
     */
    .ResponseVariant.Name doubleDecimalNegative();

    /**
     * Get '-9999999.999' numeric value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> doubleDecimalNegativeAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '-9999999.999' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> doubleDecimalNegativeAsync();

    /**
     * Get '-9999999.999' numeric value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> doubleDecimalNegativeWithServiceResponseAsync();

    /**
     * Get null numeric value (no query parameter).
     *
     */
    .ResponseVariant.Name doubleNull();

    /**
     * Get null numeric value (no query parameter).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> doubleNullAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get null numeric value (no query parameter).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> doubleNullAsync();

    /**
     * Get null numeric value (no query parameter).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> doubleNullWithServiceResponseAsync();
    /**
     * Get null numeric value (no query parameter).
     *
     * @param doubleQuery null numeric value
     */
    .ResponseVariant.Name doubleNull(AutoRest.Java.Model.PrimaryTypeJv doubleQuery);

    /**
     * Get null numeric value (no query parameter).
     *
     * @param doubleQuery null numeric value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> doubleNullAsync(AutoRest.Java.Model.PrimaryTypeJv doubleQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get null numeric value (no query parameter).
     *
     * @param doubleQuery null numeric value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> doubleNullAsync(AutoRest.Java.Model.PrimaryTypeJv doubleQuery);

    /**
     * Get null numeric value (no query parameter).
     *
     * @param doubleQuery null numeric value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> doubleNullWithServiceResponseAsync(AutoRest.Java.Model.PrimaryTypeJv doubleQuery);

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.
     *
     */
    .ResponseVariant.Name stringUnicode();

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> stringUnicodeAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> stringUnicodeAsync();

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multi-byte string value.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> stringUnicodeWithServiceResponseAsync();

    /**
     * Get 'begin!*'();:@ &amp;=+$,/?#[]end.
     *
     */
    .ResponseVariant.Name stringUrlEncoded();

    /**
     * Get 'begin!*'();:@ &amp;=+$,/?#[]end.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> stringUrlEncodedAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get 'begin!*'();:@ &amp;=+$,/?#[]end.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> stringUrlEncodedAsync();

    /**
     * Get 'begin!*'();:@ &amp;=+$,/?#[]end.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> stringUrlEncodedWithServiceResponseAsync();

    /**
     * Get ''.
     *
     */
    .ResponseVariant.Name stringEmpty();

    /**
     * Get ''.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> stringEmptyAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get ''.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> stringEmptyAsync();

    /**
     * Get ''.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> stringEmptyWithServiceResponseAsync();

    /**
     * Get null (no query parameter in url).
     *
     */
    .ResponseVariant.Name stringNull();

    /**
     * Get null (no query parameter in url).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> stringNullAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get null (no query parameter in url).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> stringNullAsync();

    /**
     * Get null (no query parameter in url).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> stringNullWithServiceResponseAsync();
    /**
     * Get null (no query parameter in url).
     *
     * @param stringQuery null string value
     */
    .ResponseVariant.Name stringNull(AutoRest.Java.Model.PrimaryTypeJv stringQuery);

    /**
     * Get null (no query parameter in url).
     *
     * @param stringQuery null string value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> stringNullAsync(AutoRest.Java.Model.PrimaryTypeJv stringQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get null (no query parameter in url).
     *
     * @param stringQuery null string value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> stringNullAsync(AutoRest.Java.Model.PrimaryTypeJv stringQuery);

    /**
     * Get null (no query parameter in url).
     *
     * @param stringQuery null string value
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> stringNullWithServiceResponseAsync(AutoRest.Java.Model.PrimaryTypeJv stringQuery);

    /**
     * Get using uri with query parameter 'green color'.
     *
     */
    .ResponseVariant.Name enumValid();

    /**
     * Get using uri with query parameter 'green color'.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> enumValidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get using uri with query parameter 'green color'.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> enumValidAsync();

    /**
     * Get using uri with query parameter 'green color'.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> enumValidWithServiceResponseAsync();
    /**
     * Get using uri with query parameter 'green color'.
     *
     * @param enumQuery 'green color' enum value. Possible values include: 'red color', 'green color', 'blue color'
     */
    .ResponseVariant.Name enumValid(AutoRest.Java.Model.EnumTypeJv enumQuery);

    /**
     * Get using uri with query parameter 'green color'.
     *
     * @param enumQuery 'green color' enum value. Possible values include: 'red color', 'green color', 'blue color'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> enumValidAsync(AutoRest.Java.Model.EnumTypeJv enumQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get using uri with query parameter 'green color'.
     *
     * @param enumQuery 'green color' enum value. Possible values include: 'red color', 'green color', 'blue color'
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> enumValidAsync(AutoRest.Java.Model.EnumTypeJv enumQuery);

    /**
     * Get using uri with query parameter 'green color'.
     *
     * @param enumQuery 'green color' enum value. Possible values include: 'red color', 'green color', 'blue color'
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> enumValidWithServiceResponseAsync(AutoRest.Java.Model.EnumTypeJv enumQuery);

    /**
     * Get null (no query parameter in url).
     *
     */
    .ResponseVariant.Name enumNull();

    /**
     * Get null (no query parameter in url).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> enumNullAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get null (no query parameter in url).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> enumNullAsync();

    /**
     * Get null (no query parameter in url).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> enumNullWithServiceResponseAsync();
    /**
     * Get null (no query parameter in url).
     *
     * @param enumQuery null string value. Possible values include: 'red color', 'green color', 'blue color'
     */
    .ResponseVariant.Name enumNull(AutoRest.Java.Model.EnumTypeJv enumQuery);

    /**
     * Get null (no query parameter in url).
     *
     * @param enumQuery null string value. Possible values include: 'red color', 'green color', 'blue color'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> enumNullAsync(AutoRest.Java.Model.EnumTypeJv enumQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get null (no query parameter in url).
     *
     * @param enumQuery null string value. Possible values include: 'red color', 'green color', 'blue color'
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> enumNullAsync(AutoRest.Java.Model.EnumTypeJv enumQuery);

    /**
     * Get null (no query parameter in url).
     *
     * @param enumQuery null string value. Possible values include: 'red color', 'green color', 'blue color'
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> enumNullWithServiceResponseAsync(AutoRest.Java.Model.EnumTypeJv enumQuery);

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
     *
     */
    .ResponseVariant.Name byteMultiByte();

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> byteMultiByteAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> byteMultiByteAsync();

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> byteMultiByteWithServiceResponseAsync();
    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
     *
     * @param byteQuery '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
     */
    .ResponseVariant.Name byteMultiByte(AutoRest.Java.Model.PrimaryTypeJv byteQuery);

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
     *
     * @param byteQuery '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> byteMultiByteAsync(AutoRest.Java.Model.PrimaryTypeJv byteQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
     *
     * @param byteQuery '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> byteMultiByteAsync(AutoRest.Java.Model.PrimaryTypeJv byteQuery);

    /**
     * Get '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array.
     *
     * @param byteQuery '啊齄丂狛狜隣郎隣兀﨩' multibyte value as utf-8 encoded byte array
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> byteMultiByteWithServiceResponseAsync(AutoRest.Java.Model.PrimaryTypeJv byteQuery);

    /**
     * Get '' as byte array.
     *
     */
    .ResponseVariant.Name byteEmpty();

    /**
     * Get '' as byte array.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> byteEmptyAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '' as byte array.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> byteEmptyAsync();

    /**
     * Get '' as byte array.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> byteEmptyWithServiceResponseAsync();

    /**
     * Get null as byte array (no query parameters in uri).
     *
     */
    .ResponseVariant.Name byteNull();

    /**
     * Get null as byte array (no query parameters in uri).
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> byteNullAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get null as byte array (no query parameters in uri).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> byteNullAsync();

    /**
     * Get null as byte array (no query parameters in uri).
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> byteNullWithServiceResponseAsync();
    /**
     * Get null as byte array (no query parameters in uri).
     *
     * @param byteQuery null as byte array (no query parameters in uri)
     */
    .ResponseVariant.Name byteNull(AutoRest.Java.Model.PrimaryTypeJv byteQuery);

    /**
     * Get null as byte array (no query parameters in uri).
     *
     * @param byteQuery null as byte array (no query parameters in uri)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> byteNullAsync(AutoRest.Java.Model.PrimaryTypeJv byteQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get null as byte array (no query parameters in uri).
     *
     * @param byteQuery null as byte array (no query parameters in uri)
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> byteNullAsync(AutoRest.Java.Model.PrimaryTypeJv byteQuery);

    /**
     * Get null as byte array (no query parameters in uri).
     *
     * @param byteQuery null as byte array (no query parameters in uri)
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> byteNullWithServiceResponseAsync(AutoRest.Java.Model.PrimaryTypeJv byteQuery);

    /**
     * Get '2012-01-01' as date.
     *
     */
    .ResponseVariant.Name dateValid();

    /**
     * Get '2012-01-01' as date.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> dateValidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '2012-01-01' as date.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> dateValidAsync();

    /**
     * Get '2012-01-01' as date.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> dateValidWithServiceResponseAsync();

    /**
     * Get null as date - this should result in no query parameters in uri.
     *
     */
    .ResponseVariant.Name dateNull();

    /**
     * Get null as date - this should result in no query parameters in uri.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> dateNullAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get null as date - this should result in no query parameters in uri.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> dateNullAsync();

    /**
     * Get null as date - this should result in no query parameters in uri.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> dateNullWithServiceResponseAsync();
    /**
     * Get null as date - this should result in no query parameters in uri.
     *
     * @param dateQuery null as date (no query parameters in uri)
     */
    .ResponseVariant.Name dateNull(AutoRest.Java.Model.PrimaryTypeJv dateQuery);

    /**
     * Get null as date - this should result in no query parameters in uri.
     *
     * @param dateQuery null as date (no query parameters in uri)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> dateNullAsync(AutoRest.Java.Model.PrimaryTypeJv dateQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get null as date - this should result in no query parameters in uri.
     *
     * @param dateQuery null as date (no query parameters in uri)
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> dateNullAsync(AutoRest.Java.Model.PrimaryTypeJv dateQuery);

    /**
     * Get null as date - this should result in no query parameters in uri.
     *
     * @param dateQuery null as date (no query parameters in uri)
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> dateNullWithServiceResponseAsync(AutoRest.Java.Model.PrimaryTypeJv dateQuery);

    /**
     * Get '2012-01-01T01:01:01Z' as date-time.
     *
     */
    .ResponseVariant.Name dateTimeValid();

    /**
     * Get '2012-01-01T01:01:01Z' as date-time.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> dateTimeValidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get '2012-01-01T01:01:01Z' as date-time.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> dateTimeValidAsync();

    /**
     * Get '2012-01-01T01:01:01Z' as date-time.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> dateTimeValidWithServiceResponseAsync();

    /**
     * Get null as date-time, should result in no query parameters in uri.
     *
     */
    .ResponseVariant.Name dateTimeNull();

    /**
     * Get null as date-time, should result in no query parameters in uri.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> dateTimeNullAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get null as date-time, should result in no query parameters in uri.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> dateTimeNullAsync();

    /**
     * Get null as date-time, should result in no query parameters in uri.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> dateTimeNullWithServiceResponseAsync();
    /**
     * Get null as date-time, should result in no query parameters in uri.
     *
     * @param dateTimeQuery null as date-time (no query parameters)
     */
    .ResponseVariant.Name dateTimeNull(AutoRest.Java.Model.PrimaryTypeJv dateTimeQuery);

    /**
     * Get null as date-time, should result in no query parameters in uri.
     *
     * @param dateTimeQuery null as date-time (no query parameters)
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> dateTimeNullAsync(AutoRest.Java.Model.PrimaryTypeJv dateTimeQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get null as date-time, should result in no query parameters in uri.
     *
     * @param dateTimeQuery null as date-time (no query parameters)
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> dateTimeNullAsync(AutoRest.Java.Model.PrimaryTypeJv dateTimeQuery);

    /**
     * Get null as date-time, should result in no query parameters in uri.
     *
     * @param dateTimeQuery null as date-time (no query parameters)
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> dateTimeNullWithServiceResponseAsync(AutoRest.Java.Model.PrimaryTypeJv dateTimeQuery);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format.
     *
     */
    .ResponseVariant.Name arrayStringCsvValid();

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> arrayStringCsvValidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> arrayStringCsvValidAsync();

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> arrayStringCsvValidWithServiceResponseAsync();
    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
     */
    .ResponseVariant.Name arrayStringCsvValid(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> arrayStringCsvValidAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> arrayStringCsvValidAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the csv-array format
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> arrayStringCsvValidWithServiceResponseAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get a null array of string using the csv-array format.
     *
     */
    .ResponseVariant.Name arrayStringCsvNull();

    /**
     * Get a null array of string using the csv-array format.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> arrayStringCsvNullAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get a null array of string using the csv-array format.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> arrayStringCsvNullAsync();

    /**
     * Get a null array of string using the csv-array format.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> arrayStringCsvNullWithServiceResponseAsync();
    /**
     * Get a null array of string using the csv-array format.
     *
     * @param arrayQuery a null array of string using the csv-array format
     */
    .ResponseVariant.Name arrayStringCsvNull(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get a null array of string using the csv-array format.
     *
     * @param arrayQuery a null array of string using the csv-array format
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> arrayStringCsvNullAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get a null array of string using the csv-array format.
     *
     * @param arrayQuery a null array of string using the csv-array format
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> arrayStringCsvNullAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get a null array of string using the csv-array format.
     *
     * @param arrayQuery a null array of string using the csv-array format
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> arrayStringCsvNullWithServiceResponseAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get an empty array [] of string using the csv-array format.
     *
     */
    .ResponseVariant.Name arrayStringCsvEmpty();

    /**
     * Get an empty array [] of string using the csv-array format.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> arrayStringCsvEmptyAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get an empty array [] of string using the csv-array format.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> arrayStringCsvEmptyAsync();

    /**
     * Get an empty array [] of string using the csv-array format.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> arrayStringCsvEmptyWithServiceResponseAsync();
    /**
     * Get an empty array [] of string using the csv-array format.
     *
     * @param arrayQuery an empty array [] of string using the csv-array format
     */
    .ResponseVariant.Name arrayStringCsvEmpty(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get an empty array [] of string using the csv-array format.
     *
     * @param arrayQuery an empty array [] of string using the csv-array format
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> arrayStringCsvEmptyAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get an empty array [] of string using the csv-array format.
     *
     * @param arrayQuery an empty array [] of string using the csv-array format
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> arrayStringCsvEmptyAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get an empty array [] of string using the csv-array format.
     *
     * @param arrayQuery an empty array [] of string using the csv-array format
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> arrayStringCsvEmptyWithServiceResponseAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format.
     *
     */
    .ResponseVariant.Name arrayStringSsvValid();

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> arrayStringSsvValidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> arrayStringSsvValidAsync();

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> arrayStringSsvValidWithServiceResponseAsync();
    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format
     */
    .ResponseVariant.Name arrayStringSsvValid(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> arrayStringSsvValidAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> arrayStringSsvValidAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the ssv-array format
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> arrayStringSsvValidWithServiceResponseAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format.
     *
     */
    .ResponseVariant.Name arrayStringTsvValid();

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> arrayStringTsvValidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> arrayStringTsvValidAsync();

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> arrayStringTsvValidWithServiceResponseAsync();
    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format
     */
    .ResponseVariant.Name arrayStringTsvValid(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> arrayStringTsvValidAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> arrayStringTsvValidAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the tsv-array format
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> arrayStringTsvValidWithServiceResponseAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format.
     *
     */
    .ResponseVariant.Name arrayStringPipesValid();

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> arrayStringPipesValidAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> arrayStringPipesValidAsync();

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format.
     *
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> arrayStringPipesValidWithServiceResponseAsync();
    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format
     */
    .ResponseVariant.Name arrayStringPipesValid(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceCall} object
     */
    ServiceCall<Void> arrayStringPipesValidAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery, final ServiceCallback<Void> serviceCallback);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> arrayStringPipesValidAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

    /**
     * Get an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format.
     *
     * @param arrayQuery an array of string ['ArrayQuery1', 'begin!*'();:@ &amp;=+$,/?#[]end' , null, ''] using the pipes-array format
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> arrayStringPipesValidWithServiceResponseAsync(AutoRest.Java.Model.SequenceTypeJv arrayQuery);

}
