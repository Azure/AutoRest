@using System
@using System.Globalization
@using System.Linq;
@using AutoRest.Core.Model
@using AutoRest.Core.Utilities
@using AutoRest.NodeJS
@using AutoRest.NodeJS.Model
@using AutoRest.NodeJS.Templates
@inherits AutoRest.Core.Template<MethodJs>

@(Model.GenerateMethodDocumentation(MethodJs.MethodFlavor.HttpOperationResponse))
@(Model.MethodGroup.TypeName).prototype.@(Model.Name.ToCamelCase())WithHttpOperationResponse = function @(Model.Name.ToCamelCase())WithHttpOperationResponse(@(Model.MethodParameterDeclaration)) {
  let client = @(Model.ClientReference);
  let self = this;
  return new Promise((resolve, reject) => {
    self._@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclaration), (err, result, request, response) => {
      let httpOperationResponse = new HttpOperationResponse(request, response);
      httpOperationResponse.body = result;
      err ? reject(err) : resolve(httpOperationResponse);
      return;
    });
  });
};

@(Model.GenerateMethodDocumentation(MethodJs.MethodFlavor.Promise))
@(Model.MethodGroup.TypeName).prototype.@(Model.Name.ToCamelCase()) = function @(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationWithCallback(true))) {
  let client = @(Model.ClientReference);
  let self = this;
  if (!optionalCallback && typeof options === 'function') {
    optionalCallback = options;
    options = null;
  }
  if (!optionalCallback) {
    return new Promise((resolve, reject) => {
      self._@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclaration), (err, result, request, response) => {
        err ? reject(err) : resolve(result);
        return;
      });
    });
  } else {
    return self._@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationWithCallback(true)));
  }
};

@(Model.GenerateMethodDocumentation(MethodJs.MethodFlavor.Callback))
function _@(Model.Name.ToCamelCase())(@(Model.MethodParameterDeclarationWithCallback())) {
  let client = @(Model.ClientReference);
  if(!callback && typeof options === 'function') {
    callback = options;
    options = null;
  }
  if (!callback) {
    throw new Error('callback cannot be null.');
  }

  @if (((CompositeType)Model.OptionsParameterTemplateModel.ModelType).Properties.Count > 1)
  {
  @:@(Model.BuildOptionalMappings())
  }

  @foreach(var parameter in Model.ParameterTemplateModels)
  {
    if (parameter.IsConstant && !parameter.IsClientProperty)
    {
  @:let @(parameter.Name) = @(parameter.DefaultValue);
    }

    if (parameter.ModelType is CompositeType
      && !parameter.IsConstant
      && parameter.IsRequired
      && !parameter.IsClientProperty
      && ((CompositeType)parameter.ModelType).ContainsConstantProperties)
    {
  @:if (@(parameter.Name) === null || @(parameter.Name) === undefined)
  @:{
  @:  @(parameter.Name) = {};
  @:}
    }
  }

  @if (Model.ParameterTemplateModels.Any())
  {
      var validationBlock = Model.ValidationString;
  if (!string.IsNullOrWhiteSpace(validationBlock))
  {
  <text>
  // Validate
  try {
    @(validationBlock)
  } catch (error) {
    return callback(error);
  }
  </text>
  }
  }
@(Model.BuildInputMappings())
  @EmptyLine
  // Construct URL
  @if (Model.IsAbsoluteUrl)
  {
  @:let requestUrl = '@(((string)Model.Url).EscapeSingleQuotes())';
  }
  else
  {
  @:let baseUrl = @(Model.ClientReference).baseUri;
  @:let requestUrl = baseUrl + (baseUrl.endsWith('/') ? '' : '/') + '@((Model.Url.StartsWith("/") ? Model.Url.TrimStart('/') : (string)Model.Url).EscapeSingleQuotes())';
  }
  @(Model.BuildUrl("requestUrl"))
  @EmptyLine
  // Create HTTP transport objects
  let httpRequest = new WebResource();
  httpRequest.method = '@(Model.HttpMethod.ToString().ToUpper())';
  httpRequest.headers = {};
  httpRequest.url = requestUrl;

  // Set Headers
  @(Model.SetDefaultHeaders)
  @foreach (var parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.Header))
  {
  @:if (@(parameter.Name) !== undefined && @(parameter.Name) !== null) {
  @:  httpRequest.headers['@(parameter.SerializedName)'] = @parameter.ModelType.ToString(parameter.Name);
  @:}
  }
  if(options) {
    for(let headerName in options['customHeaders']) {
      if (options['customHeaders'].hasOwnProperty(headerName)) {
        httpRequest.headers[headerName] = options['customHeaders'][headerName];
      }
    }
  }
  httpRequest.headers['Content-Type'] = '@(Model.RequestContentType)';

  @if (Model.RequestBody != null)
  {
      if (Model.RequestBody.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
      {
  <text>
  // Serialize Request  
  let requestContent = @(Model.RequestBody.Name);
  httpRequest.body = requestContent;
  </text>
      }
      else
      { 
  <text>
  // Serialize Request
  let requestContent = null;
  let requestModel = null;
  try {
    if (@(Model.RequestBody.Name) !== null && @(Model.RequestBody.Name) !== undefined) {
      @(Model.ConstructRequestBodyMapper)
      requestModel = client.serialize(requestModelMapper, @(Model.RequestBody.Name), '@(Model.RequestBody.Name)');
      requestContent = JSON.stringify(requestModel);
    }
  } catch (error) {
    let serializationError = new Error(util.format('Error "%s" occurred in serializing the ' + 
        'payload - "%s"', error.message, util.inspect(@(Model.RequestBody.Name), {depth: null})));
    return callback(serializationError);
  }

  httpRequest.body = requestContent;
  </text>
      }
  }
  else if (Model.LogicalParameters.Where(p => p.Location == ParameterLocation.FormData).Any())
  {      
  <text>
  // Serialize Request  
  let formData = {};  
      @foreach (var parameter in Model.LogicalParameters.Where(p => p.Location == ParameterLocation.FormData))
      {
  @:if (@(parameter.Name) !== undefined && @(parameter.Name) !== null) {
          if (parameter.ModelType.IsPrimaryType(KnownPrimaryType.Stream))
          {  
    @:formData['@(parameter.SerializedName)'] = @(parameter.Name);  
          }
          else
          {
    @:formData['@(parameter.SerializedName)'] = @parameter.ModelType.ToString(parameter.Name);
          }
  @:}
      }  
  httpRequest.formData = formData;
  </text>      
  }
  else
  {
  <text>
  httpRequest.body = null;
  </text>
  }

  @if (Model.Responses.Any(r => r.Value.Body.IsPrimaryType(KnownPrimaryType.Stream)))
  {
@:  @Include(new MethodStreamPipelineTemplate(), Model)
  }
  else
  {
@:  @Include(new MethodJsonPipelineTemplate(), Model)
  }
};
