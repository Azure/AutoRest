// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Compute
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Disks.
    /// </summary>
    public static partial class DisksExtensions
    {
            /// <summary>
            /// Creates or updates a disk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='diskName'>
            /// The name of the disk within the given subscription and resource group.
            /// </param>
            /// <param name='disk'>
            /// Disk object supplied in the body of the Put disk operation.
            /// </param>
            public static Disk CreateOrUpdate(this IDisks operations, string resourceGroupName, string diskName, Disk disk)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, diskName, disk).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates or updates a disk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='diskName'>
            /// The name of the disk within the given subscription and resource group.
            /// </param>
            /// <param name='disk'>
            /// Disk object supplied in the body of the Put disk operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Disk> CreateOrUpdateAsync(this IDisks operations, string resourceGroupName, string diskName, Disk disk, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, diskName, disk, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates (patches) a disk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='diskName'>
            /// The name of the disk within the given subscription and resource group.
            /// </param>
            /// <param name='disk'>
            /// Disk object supplied in the body of the Patch disk operation.
            /// </param>
            public static Disk Update(this IDisks operations, string resourceGroupName, string diskName, DiskUpdate disk)
            {
                return operations.UpdateAsync(resourceGroupName, diskName, disk).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates (patches) a disk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='diskName'>
            /// The name of the disk within the given subscription and resource group.
            /// </param>
            /// <param name='disk'>
            /// Disk object supplied in the body of the Patch disk operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Disk> UpdateAsync(this IDisks operations, string resourceGroupName, string diskName, DiskUpdate disk, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, diskName, disk, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets information about a disk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='diskName'>
            /// The name of the disk within the given subscription and resource group.
            /// </param>
            public static Disk Get(this IDisks operations, string resourceGroupName, string diskName)
            {
                return operations.GetAsync(resourceGroupName, diskName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets information about a disk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='diskName'>
            /// The name of the disk within the given subscription and resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Disk> GetAsync(this IDisks operations, string resourceGroupName, string diskName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, diskName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a disk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='diskName'>
            /// The name of the disk within the given subscription and resource group.
            /// </param>
            public static OperationStatusResponse Delete(this IDisks operations, string resourceGroupName, string diskName)
            {
                return operations.DeleteAsync(resourceGroupName, diskName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a disk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='diskName'>
            /// The name of the disk within the given subscription and resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatusResponse> DeleteAsync(this IDisks operations, string resourceGroupName, string diskName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, diskName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the disks under a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            public static DiskList ListByResourceGroup(this IDisks operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the disks under a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiskList> ListByResourceGroupAsync(this IDisks operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the disks under a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static DiskList List(this IDisks operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the disks under a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiskList> ListAsync(this IDisks operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Grants access to a disk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='diskName'>
            /// The name of the disk within the given subscription and resource group.
            /// </param>
            /// <param name='grantAccessData'>
            /// Access data object supplied in the body of the get disk access operation.
            /// </param>
            public static AccessUri GrantAccess(this IDisks operations, string resourceGroupName, string diskName, GrantAccessData grantAccessData)
            {
                return operations.GrantAccessAsync(resourceGroupName, diskName, grantAccessData).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Grants access to a disk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='diskName'>
            /// The name of the disk within the given subscription and resource group.
            /// </param>
            /// <param name='grantAccessData'>
            /// Access data object supplied in the body of the get disk access operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<AccessUri> GrantAccessAsync(this IDisks operations, string resourceGroupName, string diskName, GrantAccessData grantAccessData, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GrantAccessWithHttpMessagesAsync(resourceGroupName, diskName, grantAccessData, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Revokes access to a disk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='diskName'>
            /// The name of the disk within the given subscription and resource group.
            /// </param>
            public static OperationStatusResponse RevokeAccess(this IDisks operations, string resourceGroupName, string diskName)
            {
                return operations.RevokeAccessAsync(resourceGroupName, diskName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Revokes access to a disk.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='diskName'>
            /// The name of the disk within the given subscription and resource group.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<OperationStatusResponse> RevokeAccessAsync(this IDisks operations, string resourceGroupName, string diskName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RevokeAccessWithHttpMessagesAsync(resourceGroupName, diskName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
