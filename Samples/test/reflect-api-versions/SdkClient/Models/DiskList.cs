// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Compute.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The List Disks operation response.
    /// </summary>
    public partial class DiskList
    {
        /// <summary>
        /// Initializes a new instance of the DiskList class.
        /// </summary>
        public DiskList()
        {
          CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DiskList class.
        /// </summary>
        /// <param name="value">A list of disks.</param>
        /// <param name="nextLink">The uri to fetch the next page of disks.
        /// Call ListNext() with this to fetch the next page of disks.</param>
        public DiskList(IList<Disk> value, string nextLink = default(string))
        {
            Value = value;
            NextLink = nextLink;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a list of disks.
        /// </summary>
        [JsonProperty(PropertyName = "value")]
        public IList<Disk> Value { get; set; }

        /// <summary>
        /// Gets or sets the uri to fetch the next page of disks. Call
        /// ListNext() with this to fetch the next page of disks.
        /// </summary>
        [JsonProperty(PropertyName = "nextLink")]
        public string NextLink { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Value == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Value");
            }
            if (Value != null)
            {
                foreach (var element in Value)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
