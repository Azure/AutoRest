// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Compute
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    public partial class Compute : ServiceClient<Compute>, ICompute
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Subscription credentials which uniquely identify Microsoft Azure
        /// subscription. The subscription ID forms part of the URI for every service
        /// call.
        /// </summary>
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Gets the IAvailabilitySets.
        /// </summary>
        public virtual IAvailabilitySets AvailabilitySets { get; private set; }

        /// <summary>
        /// Gets the IVirtualMachineExtensionImages.
        /// </summary>
        public virtual IVirtualMachineExtensionImages VirtualMachineExtensionImages { get; private set; }

        /// <summary>
        /// Gets the IVirtualMachineExtensions.
        /// </summary>
        public virtual IVirtualMachineExtensions VirtualMachineExtensions { get; private set; }

        /// <summary>
        /// Gets the IVirtualMachineImages.
        /// </summary>
        public virtual IVirtualMachineImages VirtualMachineImages { get; private set; }

        /// <summary>
        /// Gets the IUsageOperations.
        /// </summary>
        public virtual IUsageOperations Usage { get; private set; }

        /// <summary>
        /// Gets the IVirtualMachineSizes.
        /// </summary>
        public virtual IVirtualMachineSizes VirtualMachineSizes { get; private set; }

        /// <summary>
        /// Gets the IImages.
        /// </summary>
        public virtual IImages Images { get; private set; }

        /// <summary>
        /// Gets the IResourceSkus.
        /// </summary>
        public virtual IResourceSkus ResourceSkus { get; private set; }

        /// <summary>
        /// Gets the IVirtualMachines.
        /// </summary>
        public virtual IVirtualMachines VirtualMachines { get; private set; }

        /// <summary>
        /// Gets the IVirtualMachineScaleSets.
        /// </summary>
        public virtual IVirtualMachineScaleSets VirtualMachineScaleSets { get; private set; }

        /// <summary>
        /// Gets the IVirtualMachineScaleSetExtensions.
        /// </summary>
        public virtual IVirtualMachineScaleSetExtensions VirtualMachineScaleSetExtensions { get; private set; }

        /// <summary>
        /// Gets the IVirtualMachineScaleSetVMs.
        /// </summary>
        public virtual IVirtualMachineScaleSetVMs VirtualMachineScaleSetVMs { get; private set; }

        /// <summary>
        /// Gets the IDisks.
        /// </summary>
        public virtual IDisks Disks { get; private set; }

        /// <summary>
        /// Gets the ISnapshots.
        /// </summary>
        public virtual ISnapshots Snapshots { get; private set; }

        /// <summary>
        /// Gets the IVirtualMachineRunCommands.
        /// </summary>
        public virtual IVirtualMachineRunCommands VirtualMachineRunCommands { get; private set; }

        /// <summary>
        /// Gets the IContainerServices.
        /// </summary>
        public virtual IContainerServices ContainerServices { get; private set; }

        /// <summary>
        /// Initializes a new instance of the Compute class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public Compute(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the Compute class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public Compute(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the Compute class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public Compute(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the Compute class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public Compute(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            AvailabilitySets = new AvailabilitySets(this);
            VirtualMachineExtensionImages = new VirtualMachineExtensionImages(this);
            VirtualMachineExtensions = new VirtualMachineExtensions(this);
            VirtualMachineImages = new VirtualMachineImages(this);
            Usage = new UsageOperations(this);
            VirtualMachineSizes = new VirtualMachineSizes(this);
            Images = new Images(this);
            ResourceSkus = new ResourceSkus(this);
            VirtualMachines = new VirtualMachines(this);
            VirtualMachineScaleSets = new VirtualMachineScaleSets(this);
            VirtualMachineScaleSetExtensions = new VirtualMachineScaleSetExtensions(this);
            VirtualMachineScaleSetVMs = new VirtualMachineScaleSetVMs(this);
            Disks = new Disks(this);
            Snapshots = new Snapshots(this);
            VirtualMachineRunCommands = new VirtualMachineRunCommands(this);
            ContainerServices = new ContainerServices(this);
            BaseUri = new System.Uri("https://management.azure.com");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new TransformationJsonConverter());
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
            DeserializationSettings.Converters.Add(new TransformationJsonConverter());
        }
    }
}
