// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Compute
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VirtualMachineRunCommands.
    /// </summary>
    public static partial class VirtualMachineRunCommandsExtensions
    {
            /// <summary>
            /// Lists all available run commands for a subscription in a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location upon which run commands is queried.
            /// </param>
            public static RunCommandListResult List(this IVirtualMachineRunCommands operations, string location)
            {
                return operations.ListAsync(location).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all available run commands for a subscription in a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location upon which run commands is queried.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RunCommandListResult> ListAsync(this IVirtualMachineRunCommands operations, string location, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(location, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets specific run command for a subscription in a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location upon which run commands is queried.
            /// </param>
            /// <param name='commandId'>
            /// The command id.
            /// </param>
            public static RunCommandDocument Get(this IVirtualMachineRunCommands operations, string location, string commandId)
            {
                return operations.GetAsync(location, commandId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets specific run command for a subscription in a location.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='location'>
            /// The location upon which run commands is queried.
            /// </param>
            /// <param name='commandId'>
            /// The command id.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<RunCommandDocument> GetAsync(this IVirtualMachineRunCommands operations, string location, string commandId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(location, commandId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
