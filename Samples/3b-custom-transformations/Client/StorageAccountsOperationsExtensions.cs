// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for StorageAccountsOperations.
    /// </summary>
    public static partial class StorageAccountsOperationsExtensions
    {
            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "108",
            /// "isClientProperty": false,
            /// "location": "body",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "StorageAccountCheckNameAvailabilityParameters",
            /// "modelType": {
            /// "$ref": "1"
            /// },
            /// "#documentation": "The name of the storage account within the specified
            /// resource group. Storage account names must be between 3 and 24 characters
            /// in length and use numbers and lower-case letters only.",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "109",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "110",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "111",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "112",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "post",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "6"
            /// },
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "6"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Checks that account name is valid and is not in use.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "deprecated": false,
            /// "#name": "CheckNameAvailability",
            /// "#group": "checkNameAvailability",
            /// "#serializedName": "checkNameAvailability_CheckNameAvailability",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability"
            /// }
            /// </summary>
            /// <remarks>
            /// Checks that account name is valid and is not in use.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            public static CheckNameAvailabilityResult CheckNameAvailability(this IStorageAccountsOperations operations, StorageAccountCheckNameAvailabilityParameters accountName)
            {
                return operations.CheckNameAvailabilityAsync(accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "108",
            /// "isClientProperty": false,
            /// "location": "body",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "StorageAccountCheckNameAvailabilityParameters",
            /// "modelType": {
            /// "$ref": "1"
            /// },
            /// "#documentation": "The name of the storage account within the specified
            /// resource group. Storage account names must be between 3 and 24 characters
            /// in length and use numbers and lower-case letters only.",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "109",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "110",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "111",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "112",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "post",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "6"
            /// },
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "6"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Checks that account name is valid and is not in use.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "deprecated": false,
            /// "#name": "CheckNameAvailability",
            /// "#group": "checkNameAvailability",
            /// "#serializedName": "checkNameAvailability_CheckNameAvailability",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/checkNameAvailability"
            /// }
            /// </summary>
            /// <remarks>
            /// Checks that account name is valid and is not in use.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CheckNameAvailabilityResult> CheckNameAvailabilityAsync(this IStorageAccountsOperations operations, StorageAccountCheckNameAvailabilityParameters accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "113",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "114",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group within the user's
            /// subscription.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "115",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "constraints": {
            /// "MaxLength": "24",
            /// "MinLength": "3"
            /// },
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "116",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the storage account within the specified
            /// resource group. Storage account names must be between 3 and 24 characters
            /// in length and use numbers and lower-case letters only.  ",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "117",
            /// "isClientProperty": false,
            /// "location": "body",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "StorageAccountCreateParameters",
            /// "modelType": {
            /// "$ref": "16"
            /// },
            /// "#documentation": "The parameters to provide for the created account.",
            /// "#name": "parameters",
            /// "#serializedName": "parameters"
            /// },
            /// {
            /// "$id": "118",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "119",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "120",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "121",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "put",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// },
            /// "Accepted": {
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Asynchronously creates a new storage account with the
            /// specified parameters. Existing accounts cannot be updated with this API and
            /// should instead use the Update Storage Account API. If an account is already
            /// created and subsequent PUT request is issued with exact same set of
            /// properties, then HTTP 200 would be returned. ",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "extensions": {
            /// "x-ms-long-running-operation": true
            /// },
            /// "deprecated": false,
            /// "#name": "Create",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_Create",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
            /// }
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new storage account with the specified parameters.
            /// Existing accounts cannot be updated with this API and should instead use
            /// the Update Storage Account API. If an account is already created and
            /// subsequent PUT request is issued with exact same set of properties, then
            /// HTTP 200 would be returned.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to provide for the created account.
            /// </param>
            public static StorageAccount Create(this IStorageAccountsOperations operations, string resourceGroupName, string accountName, StorageAccountCreateParameters parameters)
            {
                return operations.CreateAsync(resourceGroupName, accountName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "113",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "114",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group within the user's
            /// subscription.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "115",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "constraints": {
            /// "MaxLength": "24",
            /// "MinLength": "3"
            /// },
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "116",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the storage account within the specified
            /// resource group. Storage account names must be between 3 and 24 characters
            /// in length and use numbers and lower-case letters only.  ",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "117",
            /// "isClientProperty": false,
            /// "location": "body",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "StorageAccountCreateParameters",
            /// "modelType": {
            /// "$ref": "16"
            /// },
            /// "#documentation": "The parameters to provide for the created account.",
            /// "#name": "parameters",
            /// "#serializedName": "parameters"
            /// },
            /// {
            /// "$id": "118",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "119",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "120",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "121",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "put",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// },
            /// "Accepted": {
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Asynchronously creates a new storage account with the
            /// specified parameters. Existing accounts cannot be updated with this API and
            /// should instead use the Update Storage Account API. If an account is already
            /// created and subsequent PUT request is issued with exact same set of
            /// properties, then HTTP 200 would be returned. ",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "extensions": {
            /// "x-ms-long-running-operation": true
            /// },
            /// "deprecated": false,
            /// "#name": "Create",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_Create",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
            /// }
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new storage account with the specified parameters.
            /// Existing accounts cannot be updated with this API and should instead use
            /// the Update Storage Account API. If an account is already created and
            /// subsequent PUT request is issued with exact same set of properties, then
            /// HTTP 200 would be returned.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to provide for the created account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageAccount> CreateAsync(this IStorageAccountsOperations operations, string resourceGroupName, string accountName, StorageAccountCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "122",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "123",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group within the user's
            /// subscription.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "124",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "constraints": {
            /// "MaxLength": "24",
            /// "MinLength": "3"
            /// },
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "125",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the storage account within the specified
            /// resource group. Storage account names must be between 3 and 24 characters
            /// in length and use numbers and lower-case letters only.  ",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "126",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "127",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "128",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "129",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "delete",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "isNullable": true
            /// },
            /// "NoContent": {
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "isNullable": true
            /// },
            /// "description": "Deletes a storage account in Microsoft Azure.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "deprecated": false,
            /// "#name": "Delete",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_Delete",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
            /// }
            /// </summary>
            /// <remarks>
            /// Deletes a storage account in Microsoft Azure.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            public static void Delete(this IStorageAccountsOperations operations, string resourceGroupName, string accountName)
            {
                operations.DeleteAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "122",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "123",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group within the user's
            /// subscription.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "124",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "constraints": {
            /// "MaxLength": "24",
            /// "MinLength": "3"
            /// },
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "125",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the storage account within the specified
            /// resource group. Storage account names must be between 3 and 24 characters
            /// in length and use numbers and lower-case letters only.  ",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "126",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "127",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "128",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "129",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "delete",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "isNullable": true
            /// },
            /// "NoContent": {
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "isNullable": true
            /// },
            /// "description": "Deletes a storage account in Microsoft Azure.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "deprecated": false,
            /// "#name": "Delete",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_Delete",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
            /// }
            /// </summary>
            /// <remarks>
            /// Deletes a storage account in Microsoft Azure.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IStorageAccountsOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "130",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "131",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group within the user's
            /// subscription.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "132",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "constraints": {
            /// "MaxLength": "24",
            /// "MinLength": "3"
            /// },
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "133",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the storage account within the specified
            /// resource group. Storage account names must be between 3 and 24 characters
            /// in length and use numbers and lower-case letters only.  ",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "134",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "135",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "136",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "137",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "get",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Returns the properties for the specified storage account
            /// including but not limited to name, account type, location, and account
            /// status. The ListKeys operation should be used to retrieve storage keys.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "deprecated": false,
            /// "#name": "GetProperties",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_GetProperties",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
            /// }
            /// </summary>
            /// <remarks>
            /// Returns the properties for the specified storage account including but not
            /// limited to name, account type, location, and account status. The ListKeys
            /// operation should be used to retrieve storage keys.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            public static StorageAccount GetProperties(this IStorageAccountsOperations operations, string resourceGroupName, string accountName)
            {
                return operations.GetPropertiesAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "130",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "131",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group within the user's
            /// subscription.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "132",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "constraints": {
            /// "MaxLength": "24",
            /// "MinLength": "3"
            /// },
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "133",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the storage account within the specified
            /// resource group. Storage account names must be between 3 and 24 characters
            /// in length and use numbers and lower-case letters only.  ",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "134",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "135",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "136",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "137",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "get",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Returns the properties for the specified storage account
            /// including but not limited to name, account type, location, and account
            /// status. The ListKeys operation should be used to retrieve storage keys.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "deprecated": false,
            /// "#name": "GetProperties",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_GetProperties",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
            /// }
            /// </summary>
            /// <remarks>
            /// Returns the properties for the specified storage account including but not
            /// limited to name, account type, location, and account status. The ListKeys
            /// operation should be used to retrieve storage keys.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageAccount> GetPropertiesAsync(this IStorageAccountsOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPropertiesWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "138",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "139",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group within the user's
            /// subscription.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "140",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "constraints": {
            /// "MaxLength": "24",
            /// "MinLength": "3"
            /// },
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "141",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the storage account within the specified
            /// resource group. Storage account names must be between 3 and 24 characters
            /// in length and use numbers and lower-case letters only.  ",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "142",
            /// "isClientProperty": false,
            /// "location": "body",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "StorageAccountUpdateParameters",
            /// "modelType": {
            /// "$ref": "80"
            /// },
            /// "#documentation": "The parameters to update on the account. Note that only
            /// one property can be changed at a time using this API. ",
            /// "#name": "parameters",
            /// "#serializedName": "parameters"
            /// },
            /// {
            /// "$id": "143",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "144",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "145",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "146",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "patch",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Updates the account type or tags for a storage account. It
            /// can also be used to add a custom domain (note that custom domains cannot be
            /// added via the Create operation). Only one custom domain is supported per
            /// storage account. In order to replace a custom domain, the old value must be
            /// cleared before a new value may be set. To clear a custom domain, simply
            /// update the custom domain with empty string. Then call update again with the
            /// new cutsom domain name. The update API can only be used to update one of
            /// tags, accountType, or customDomain per call. To update multiple of these
            /// properties, call the API multiple times with one change per call. This call
            /// does not change the storage keys for the account. If you want to change
            /// storage account keys, use the RegenerateKey operation. The location and
            /// name of the storage account cannot be changed after creation.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "deprecated": false,
            /// "#name": "Update",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_Update",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
            /// }
            /// </summary>
            /// <remarks>
            /// Updates the account type or tags for a storage account. It can also be used
            /// to add a custom domain (note that custom domains cannot be added via the
            /// Create operation). Only one custom domain is supported per storage account.
            /// In order to replace a custom domain, the old value must be cleared before a
            /// new value may be set. To clear a custom domain, simply update the custom
            /// domain with empty string. Then call update again with the new cutsom domain
            /// name. The update API can only be used to update one of tags, accountType,
            /// or customDomain per call. To update multiple of these properties, call the
            /// API multiple times with one change per call. This call does not change the
            /// storage keys for the account. If you want to change storage account keys,
            /// use the RegenerateKey operation. The location and name of the storage
            /// account cannot be changed after creation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to update on the account. Note that only one property can be
            /// changed at a time using this API.
            /// </param>
            public static StorageAccount Update(this IStorageAccountsOperations operations, string resourceGroupName, string accountName, StorageAccountUpdateParameters parameters)
            {
                return operations.UpdateAsync(resourceGroupName, accountName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "138",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "139",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group within the user's
            /// subscription.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "140",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "constraints": {
            /// "MaxLength": "24",
            /// "MinLength": "3"
            /// },
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "141",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the storage account within the specified
            /// resource group. Storage account names must be between 3 and 24 characters
            /// in length and use numbers and lower-case letters only.  ",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "142",
            /// "isClientProperty": false,
            /// "location": "body",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "StorageAccountUpdateParameters",
            /// "modelType": {
            /// "$ref": "80"
            /// },
            /// "#documentation": "The parameters to update on the account. Note that only
            /// one property can be changed at a time using this API. ",
            /// "#name": "parameters",
            /// "#serializedName": "parameters"
            /// },
            /// {
            /// "$id": "143",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "144",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "145",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "146",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "patch",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Updates the account type or tags for a storage account. It
            /// can also be used to add a custom domain (note that custom domains cannot be
            /// added via the Create operation). Only one custom domain is supported per
            /// storage account. In order to replace a custom domain, the old value must be
            /// cleared before a new value may be set. To clear a custom domain, simply
            /// update the custom domain with empty string. Then call update again with the
            /// new cutsom domain name. The update API can only be used to update one of
            /// tags, accountType, or customDomain per call. To update multiple of these
            /// properties, call the API multiple times with one change per call. This call
            /// does not change the storage keys for the account. If you want to change
            /// storage account keys, use the RegenerateKey operation. The location and
            /// name of the storage account cannot be changed after creation.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "deprecated": false,
            /// "#name": "Update",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_Update",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
            /// }
            /// </summary>
            /// <remarks>
            /// Updates the account type or tags for a storage account. It can also be used
            /// to add a custom domain (note that custom domains cannot be added via the
            /// Create operation). Only one custom domain is supported per storage account.
            /// In order to replace a custom domain, the old value must be cleared before a
            /// new value may be set. To clear a custom domain, simply update the custom
            /// domain with empty string. Then call update again with the new cutsom domain
            /// name. The update API can only be used to update one of tags, accountType,
            /// or customDomain per call. To update multiple of these properties, call the
            /// API multiple times with one change per call. This call does not change the
            /// storage keys for the account. If you want to change storage account keys,
            /// use the RegenerateKey operation. The location and name of the storage
            /// account cannot be changed after creation.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to update on the account. Note that only one property can be
            /// changed at a time using this API.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageAccount> UpdateAsync(this IStorageAccountsOperations operations, string resourceGroupName, string accountName, StorageAccountUpdateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "147",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "148",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "149",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "constraints": {
            /// "MaxLength": "24",
            /// "MinLength": "3"
            /// },
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "150",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the storage account.",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "151",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "152",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "153",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "154",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "post",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "69"
            /// },
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "69"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Lists the access keys for the specified storage account.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "deprecated": false,
            /// "#name": "ListKeys",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_ListKeys",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys"
            /// }
            /// </summary>
            /// <remarks>
            /// Lists the access keys for the specified storage account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account.
            /// </param>
            public static StorageAccountKeys ListKeys(this IStorageAccountsOperations operations, string resourceGroupName, string accountName)
            {
                return operations.ListKeysAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "147",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "148",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "149",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "constraints": {
            /// "MaxLength": "24",
            /// "MinLength": "3"
            /// },
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "150",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the storage account.",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "151",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "152",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "153",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "154",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "post",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "69"
            /// },
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "69"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Lists the access keys for the specified storage account.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "deprecated": false,
            /// "#name": "ListKeys",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_ListKeys",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/listKeys"
            /// }
            /// </summary>
            /// <remarks>
            /// Lists the access keys for the specified storage account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageAccountKeys> ListKeysAsync(this IStorageAccountsOperations operations, string resourceGroupName, string accountName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListKeysWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "155",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "156",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "157",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "158",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "get",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "74"
            /// },
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "74"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Lists all the storage accounts available under the
            /// subscription. Note that storage keys are not returned; use the ListKeys
            /// operation for this.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "extensions": {
            /// "x-ms-pageable": {
            /// "nextLinkName": null
            /// }
            /// },
            /// "deprecated": false,
            /// "#name": "List",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_List",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts"
            /// }
            /// </summary>
            /// <remarks>
            /// Lists all the storage accounts available under the subscription. Note that
            /// storage keys are not returned; use the ListKeys operation for this.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IEnumerable<StorageAccount> List(this IStorageAccountsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "155",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "156",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "157",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "158",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "get",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "74"
            /// },
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "74"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Lists all the storage accounts available under the
            /// subscription. Note that storage keys are not returned; use the ListKeys
            /// operation for this.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "extensions": {
            /// "x-ms-pageable": {
            /// "nextLinkName": null
            /// }
            /// },
            /// "deprecated": false,
            /// "#name": "List",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_List",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/providers/Microsoft.Storage/storageAccounts"
            /// }
            /// </summary>
            /// <remarks>
            /// Lists all the storage accounts available under the subscription. Note that
            /// storage keys are not returned; use the ListKeys operation for this.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<StorageAccount>> ListAsync(this IStorageAccountsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "159",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "160",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group within the user's
            /// subscription.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "161",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "162",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "163",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "164",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "get",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "74"
            /// },
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "74"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Lists all the storage accounts available under the given
            /// resource group. Note that storage keys are not returned; use the ListKeys
            /// operation for this.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "extensions": {
            /// "x-ms-pageable": {
            /// "nextLinkName": null
            /// }
            /// },
            /// "deprecated": false,
            /// "#name": "ListByResourceGroup",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_ListByResourceGroup",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts"
            /// }
            /// </summary>
            /// <remarks>
            /// Lists all the storage accounts available under the given resource group.
            /// Note that storage keys are not returned; use the ListKeys operation for
            /// this.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            public static IEnumerable<StorageAccount> ListByResourceGroup(this IStorageAccountsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "159",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "160",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group within the user's
            /// subscription.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "161",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "162",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "163",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "164",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "get",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "74"
            /// },
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "74"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Lists all the storage accounts available under the given
            /// resource group. Note that storage keys are not returned; use the ListKeys
            /// operation for this.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "extensions": {
            /// "x-ms-pageable": {
            /// "nextLinkName": null
            /// }
            /// },
            /// "deprecated": false,
            /// "#name": "ListByResourceGroup",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_ListByResourceGroup",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts"
            /// }
            /// </summary>
            /// <remarks>
            /// Lists all the storage accounts available under the given resource group.
            /// Note that storage keys are not returned; use the ListKeys operation for
            /// this.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IEnumerable<StorageAccount>> ListByResourceGroupAsync(this IStorageAccountsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "165",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "166",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group within the user's
            /// subscription.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "167",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "constraints": {
            /// "MaxLength": "24",
            /// "MinLength": "3"
            /// },
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "168",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the storage account within the specified
            /// resource group. Storage account names must be between 3 and 24 characters
            /// in length and use numbers and lower-case letters only.  ",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "169",
            /// "isClientProperty": false,
            /// "location": "body",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "StorageAccountRegenerateKeyParameters",
            /// "modelType": {
            /// "$ref": "85"
            /// },
            /// "#documentation": "Specifies name of the key which should be regenerated.
            /// key1 or key2 for the default keys",
            /// "#name": "regenerateKey",
            /// "#serializedName": "regenerateKey"
            /// },
            /// {
            /// "$id": "170",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "171",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "172",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "173",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "post",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "69"
            /// },
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "69"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Regenerates the access keys for the specified storage
            /// account.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "deprecated": false,
            /// "#name": "RegenerateKey",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_RegenerateKey",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey"
            /// }
            /// </summary>
            /// <remarks>
            /// Regenerates the access keys for the specified storage account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='regenerateKey'>
            /// Specifies name of the key which should be regenerated. key1 or key2 for the
            /// default keys
            /// </param>
            public static StorageAccountKeys RegenerateKey(this IStorageAccountsOperations operations, string resourceGroupName, string accountName, StorageAccountRegenerateKeyParameters regenerateKey)
            {
                return operations.RegenerateKeyAsync(resourceGroupName, accountName, regenerateKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "165",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "166",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group within the user's
            /// subscription.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "167",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "constraints": {
            /// "MaxLength": "24",
            /// "MinLength": "3"
            /// },
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "168",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the storage account within the specified
            /// resource group. Storage account names must be between 3 and 24 characters
            /// in length and use numbers and lower-case letters only.  ",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "169",
            /// "isClientProperty": false,
            /// "location": "body",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "StorageAccountRegenerateKeyParameters",
            /// "modelType": {
            /// "$ref": "85"
            /// },
            /// "#documentation": "Specifies name of the key which should be regenerated.
            /// key1 or key2 for the default keys",
            /// "#name": "regenerateKey",
            /// "#serializedName": "regenerateKey"
            /// },
            /// {
            /// "$id": "170",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "171",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "172",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "173",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "post",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "69"
            /// },
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "69"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Regenerates the access keys for the specified storage
            /// account.",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "deprecated": false,
            /// "#name": "RegenerateKey",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_RegenerateKey",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/regenerateKey"
            /// }
            /// </summary>
            /// <remarks>
            /// Regenerates the access keys for the specified storage account.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='regenerateKey'>
            /// Specifies name of the key which should be regenerated. key1 or key2 for the
            /// default keys
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageAccountKeys> RegenerateKeyAsync(this IStorageAccountsOperations operations, string resourceGroupName, string accountName, StorageAccountRegenerateKeyParameters regenerateKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.RegenerateKeyWithHttpMessagesAsync(resourceGroupName, accountName, regenerateKey, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "113",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "114",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group within the user's
            /// subscription.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "115",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "constraints": {
            /// "MaxLength": "24",
            /// "MinLength": "3"
            /// },
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "116",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the storage account within the specified
            /// resource group. Storage account names must be between 3 and 24 characters
            /// in length and use numbers and lower-case letters only.  ",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "117",
            /// "isClientProperty": false,
            /// "location": "body",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "StorageAccountCreateParameters",
            /// "modelType": {
            /// "$ref": "16"
            /// },
            /// "#documentation": "The parameters to provide for the created account.",
            /// "#name": "parameters",
            /// "#serializedName": "parameters"
            /// },
            /// {
            /// "$id": "118",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "119",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "120",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "121",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "put",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// },
            /// "Accepted": {
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Asynchronously creates a new storage account with the
            /// specified parameters. Existing accounts cannot be updated with this API and
            /// should instead use the Update Storage Account API. If an account is already
            /// created and subsequent PUT request is issued with exact same set of
            /// properties, then HTTP 200 would be returned. ",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "extensions": {
            /// "x-ms-long-running-operation": true
            /// },
            /// "deprecated": false,
            /// "#name": "Create",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_Create",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
            /// }
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new storage account with the specified parameters.
            /// Existing accounts cannot be updated with this API and should instead use
            /// the Update Storage Account API. If an account is already created and
            /// subsequent PUT request is issued with exact same set of properties, then
            /// HTTP 200 would be returned.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to provide for the created account.
            /// </param>
            public static StorageAccount BeginCreate(this IStorageAccountsOperations operations, string resourceGroupName, string accountName, StorageAccountCreateParameters parameters)
            {
                return operations.BeginCreateAsync(resourceGroupName, accountName, parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// {
            /// "parameters": [
            /// {
            /// "$id": "113",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "114",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the resource group within the user's
            /// subscription.",
            /// "#name": "resourceGroupName",
            /// "#serializedName": "resourceGroupName"
            /// },
            /// {
            /// "$id": "115",
            /// "isClientProperty": false,
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "constraints": {
            /// "MaxLength": "24",
            /// "MinLength": "3"
            /// },
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "116",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "The name of the storage account within the specified
            /// resource group. Storage account names must be between 3 and 24 characters
            /// in length and use numbers and lower-case letters only.  ",
            /// "#name": "accountName",
            /// "#serializedName": "accountName"
            /// },
            /// {
            /// "$id": "117",
            /// "isClientProperty": false,
            /// "location": "body",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "StorageAccountCreateParameters",
            /// "modelType": {
            /// "$ref": "16"
            /// },
            /// "#documentation": "The parameters to provide for the created account.",
            /// "#name": "parameters",
            /// "#serializedName": "parameters"
            /// },
            /// {
            /// "$id": "118",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "106"
            /// },
            /// "location": "query",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "119",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Client Api Version.",
            /// "#name": "api-version",
            /// "#serializedName": "api-version"
            /// },
            /// {
            /// "$id": "120",
            /// "isClientProperty": true,
            /// "clientProperty": {
            /// "$ref": "104"
            /// },
            /// "location": "path",
            /// "collectionFormat": "none",
            /// "isRequired": true,
            /// "isConstant": false,
            /// "modelTypeName": "String",
            /// "modelType": {
            /// "$id": "121",
            /// "$type": "AutoRest.Core.Model.PrimaryType, AutoRest.Core",
            /// "$actualType": "AutoRest.Core.Model.PrimaryType",
            /// "knownFormat": "none",
            /// "knownPrimaryType": "string",
            /// "className": "String",
            /// "declarationName": "String",
            /// "isConstant": false,
            /// "#name": "String"
            /// },
            /// "#documentation": "Gets subscription credentials which uniquely identify
            /// Microsoft Azure subscription. The subscription ID forms part of the URI for
            /// every service call.",
            /// "#name": "subscriptionId",
            /// "#serializedName": "subscriptionId"
            /// }
            /// ],
            /// "isAbsoluteUrl": false,
            /// "httpMethod": "put",
            /// "requestSerializationFormat": "none",
            /// "responseSerializationFormat": "none",
            /// "responses": {
            /// "OK": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// },
            /// "Accepted": {
            /// "isNullable": true
            /// }
            /// },
            /// "defaultResponse": {
            /// "isNullable": true
            /// },
            /// "returnType": {
            /// "body": {
            /// "$ref": "55"
            /// },
            /// "isNullable": true
            /// },
            /// "description": "Asynchronously creates a new storage account with the
            /// specified parameters. Existing accounts cannot be updated with this API and
            /// should instead use the Update Storage Account API. If an account is already
            /// created and subsequent PUT request is issued with exact same set of
            /// properties, then HTTP 200 would be returned. ",
            /// "requestContentType": "application/json; charset=utf-8",
            /// "responseContentTypes": [
            /// "application/json",
            /// "text/json"
            /// ],
            /// "extensions": {
            /// "x-ms-long-running-operation": true
            /// },
            /// "deprecated": false,
            /// "#name": "Create",
            /// "#group": "storageAccounts",
            /// "#serializedName": "storageAccounts_Create",
            /// "#url":
            /// "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}"
            /// }
            /// </summary>
            /// <remarks>
            /// Asynchronously creates a new storage account with the specified parameters.
            /// Existing accounts cannot be updated with this API and should instead use
            /// the Update Storage Account API. If an account is already created and
            /// subsequent PUT request is issued with exact same set of properties, then
            /// HTTP 200 would be returned.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group within the user's subscription.
            /// </param>
            /// <param name='accountName'>
            /// The name of the storage account within the specified resource group.
            /// Storage account names must be between 3 and 24 characters in length and use
            /// numbers and lower-case letters only.
            /// </param>
            /// <param name='parameters'>
            /// The parameters to provide for the created account.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<StorageAccount> BeginCreateAsync(this IStorageAccountsOperations operations, string resourceGroupName, string accountName, StorageAccountCreateParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, accountName, parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
